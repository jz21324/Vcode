{
  
    
        "post0": {
            "title": "Python Notebook",
            "content": "message = &quot;Hello World&quot; print(message) . Hello World .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/python_nb.html",
            "relUrl": "/jupyter/2022/09/15/python_nb.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Notes",
            "content": "Unit 1: Primitives . Primitives are datatypes that are built into java. The different datatypes are int, float, long, double, boolean, char, byte, and short. When it is lower case, it is primitive and when it is uppercase, it is part of a wrapper class. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/notes.html",
            "relUrl": "/jupyter/2022/09/15/notes.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Java Primitives Demonstration",
            "content": "int b = 10; boolean c = false; System.out.println(&quot;The integer is &quot; + b + &quot; and the boolean is &quot; + c) . The integer is 10 and the boolean isfalse .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/java_primitives.html",
            "relUrl": "/jupyter/2022/09/15/java_primitives.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Java Objects Demonstration",
            "content": "Objects . The code creates a public class called &quot;Student&quot;, which takes in three different instance variables: class, teacher, and period. With these a string of &quot;AP Computer Science A&quot;, another string of &quot;Mr. Mortensen&quot;, and an integer of 2 are put together to print out the statement, &quot;I have AP Computer Science A for Mr. Mortensen in period 2&quot; . public class Student { // instance variables public String class; public String teacher; public int period; public Student (String class, String teacher, int period) { this.class = class; this.teacher = teacher; this.period = period; } public static void main(String[] args) { Student s = new Student(&quot;AP Computer Science A&quot;, &quot;Mr. Mortensen&quot;, 2); system.out.println(&quot;I have &quot; + s.teacher &quot; for &quot; + s.class + &quot; in period &quot; + s.period); } } . | public String class; &lt;identifier&gt; expected | public String class; &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { invalid method declaration; return type required | public Student (String class, String teacher, int period) { &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { &#39;;&#39; expected | this.class = class; &lt;identifier&gt; expected | this.class = class; illegal start of expression | this.class = class; &lt;identifier&gt; expected | this.teacher = teacher; illegal start of type | this.teacher = teacher; &#39;;&#39; expected | this.teacher = teacher; &lt;identifier&gt; expected | this.period = period; illegal start of type | this.period = period; &#39;;&#39; expected | this.period = period; &lt;identifier&gt; expected | public static void main(String[] args) { illegal start of expression | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); &#39;)&#39; expected | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); not a statement | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); &#39;;&#39; expected | } reached end of file while parsing . Hacks . Explain where a Class is defined . A class is defined where you need variables, objects, or methods to be added to your code | . Explain where an instances of a Class is defined . An instance is defined in a Class as an object. | . Explain where an object is Calling a Method . An object can call a method when the action is needed to be used for the code to go through. | . Explain where an object is Mutating data . An object is mutation data when there is a change in the original data. | . Describe Console, GUI differences, or Code.org differences. . A console is where the user input and gets outputs. | Ex: Bash shell . | A GUI is more clickable and user-friendly. There is also visual feedback and display. . | Code.org used a painter as the visual object which shows the user what the code is doing. It has a public class as &quot;MyNeighborhood&quot;. To call a method, you put &quot;variableName.methodName();&quot;. . | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/java_objects.html",
            "relUrl": "/jupyter/2022/09/15/java_objects.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello Java world!&quot;) . Hello Java world! .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/java_nb.html",
            "relUrl": "/jupyter/2022/09/15/java_nb.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Iteration with 2D Array",
            "content": "class CarLoop { String [][] car; public CarLoop() { car = new String[][]{ { &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot;( _ _ _ &quot;, &quot;=`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot; ( _ _ _ &quot;, &quot; =`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot; ( _ _ _ &quot;, &quot; =`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot; ( _ _ _ &quot;, &quot; =`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, }; } public void printRace() { System.out.println(); System.out.println(&quot;Car drivng down in Java Loop&quot;); int carPlace = 4; for (int i = carPlace; i &gt;= 1; i--) { for (int row = 0; row &lt; carPlace; row++) { for (int col = 0; col &lt; car[row].length; col++) { System.out.println(car[row][col] + &quot; &quot;); } } } } public static void main(String[] args) { new CarLoop().printRace(); } } CarLoop.main(null); . Car drivng down in Java Loop ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/iteration_2Darray.html",
            "relUrl": "/jupyter/2022/09/15/iteration_2Darray.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "If Else Statement Lesson",
            "content": "If Statement . The if statement is used to test whether a condition is met or not. If the condition is true, the following command will be run. . boolean a = true; // Set the boolean to &quot;true&quot; if (a = false) { System.out.println(&quot;This is false&quot;); // Will run if a is false } if (a = true) { System.out.println(&quot;This is true&quot;); // Will run if a is true } . This is true . If-else Statement . The if-else statement will run a piece of code if a certain condition is met. If this condition is not met then another command will be run. . boolean b = false; // Set the boolean to &quot;false&quot; if (b = true) { System.out.println(&quot;b is true&quot;); } else { System.out.println(&quot;b is not true&quot;); } // The if condition is not met so the else statement is ran . b is true . If-elseif-else Statement . An if-elseif-else statement will determine whether a certain condition is true. If it isn&#39;t it will go to the next elseif statement and do the same thing. If this condition is also false then it will go down and continue to go through conditions until one is true. . boolean c = true; // Sets the boolean to &quot;true&quot; if (c = false) { System.out.println(&quot;The first if statement is true&quot;); // If the if condition is not true then it will not run } else if (c = !true) { System.out.println(&quot;This else if statement is true&quot;); } else if (c = false &amp;&amp; true) { System.out.println(&quot;This else if statement is true&quot;); } else if (c = !(!false || !true)) { System.out.println(&quot;This else if statement is true&quot;); // If the else if condition is not true then then it will not run } else { System.out.println(&quot;None of the other conditions were true&quot;); // None of the if statements or else if statements are true so the else statement will run } . None of the other conditions were true . If-elseif-else statement (5 or more conditions) . int stars = 3; // The integer &quot;stars&quot; is determined to be 3 if (stars &lt;= 0) { System.out.println(&quot;You got ☆☆☆☆☆&quot;); } else if (stars &lt;= 1) { System.out.println(&quot;You got ★☆☆☆☆&quot;); } else if (stars &lt;= 2) { System.out.println(&quot;You got ★★☆☆☆&quot;); } else if (stars &lt;= 3) { System.out.println(&quot;You got ★★★☆☆&quot;); } else if (stars &lt;= 4) { System.out.println(&quot;You got ★★★★☆&quot;); } else { System.out.println(&quot;You got ★★★★★&quot;); } // The code goes through the if and else if conditions to figure out how many stars to show. . You got ★★★☆☆ . Switch Case . A switch case is able to run one statement after choosing one from multiple statements. This makes it similar to an else-if ladder where it will go through mulitple conditions to see which is true. . When making a switch case code, it is important that you make sure no two cases have the same value and that the same variable is used for all the cases. . int stars = 4; // The integer &quot;stars&quot; is determined to be 3 switch (stars) { // A switch statement that takes in the &quot;stars&quot; integer case 1: // When there are 0 stars System.out.println(&quot;You got ☆☆☆☆☆&quot;); break; case 2: // When there is 1 star System.out.println(&quot;You got ★☆☆☆☆&quot;); break; case 3: // When there are 2 stars System.out.println(&quot;You got ★★☆☆☆&quot;); break; case 4: // When there are 3 stars System.out.println(&quot;You got ★★★☆☆&quot;); break; case 5: // When there are 4 stars System.out.println(&quot;You got ★★★★☆&quot;); break; default: //When none of the other cases are met so there are 5 stars System.out.println(&quot;You got ★★★★★&quot;); } . You got ★★★☆☆ . De Morgan&#39;s Law . De Morgan&#39;s Law states that the &quot;!&quot; symbol will negate an And statement and an Or statement. This means that if a condition is written as a || b, !(a || b) would really be a &amp;&amp; b. This goes for the other way around where !(a &amp;&amp; b) is a || b. It will also cause a true statement to be false with !(true) and vice versa. . boolean child = true; boolean hungry = false; if (!(child &amp;&amp; hungry)) { System.out.println(&quot;You have a hungry child&quot;); } else { System.out.println(&quot;Who knows what&#39;s going on?&quot;); } . You have a hungry child . boolean fruit = true; boolean red = true; if (!(!(fruit) || !(red))) { System.out.println(&quot;It&#39;s probably a red apple&quot;); } else { System.out.println(&quot;You have an unknown food&quot;); } . It&#39;s probably a red apple . Resources used . CodeHS | simplilearn | w3schools |",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/if_else_lesson.html",
            "relUrl": "/jupyter/2022/09/15/if_else_lesson.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Bash Check",
            "content": "python --version .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/15/bash_checks.html",
            "relUrl": "/jupyter/2022/09/15/bash_checks.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Focuses and Habits",
            "content": "Focuses and Habits . Focuses . School . Grades | SAT Prep | AP Exams | . Extracurriculars . School clubs: Robotics, NHS, SACS | Soccer | . Habits . Work harder and more efficiently | Plan better | Volunteer more often | Apply for more leadership roles | . Harvard Video . Notes: It is highly important to maintain a low stress level. To do this I need to take breaks from class work and spend time to do a hobby or something that I like and that can relieve stress. Most colleges cause a lot of stress to their students. . Note of gratitude: Dear Mr. Krenz, I am eternally grateful for your math teachings. You have helped me be the great mathmatician I am today. You are and will always be the best teacher there is. Thank you! . Goals: . Get straight A’s | Participate in multiple clubs | Connect with more people | .",
            "url": "https://jz21324.github.io/Vcode/markdown/2022/09/11/focus-habits.html",
            "relUrl": "/markdown/2022/09/11/focus-habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Code.org OOP",
            "content": "Code.org OOP . Proof of completion . ![]code.org2_pic.png) . Classes and Objects . Classes are a way to create and store objects and their data types and methods. They contain data, such as variables and actions, such as methods. . Instances . Instances are variables that are non-static and belong to a certain class. To create the, an object has to be instantiated to all methods in that class. . Loop Statements . Java has if and while statements that allow for code to be executed with a specific condition. . For a while loop, if the condition is true, the code will continue to run until that same condition is false. . For an if statement, the code will only run once if the condition is true. If statements can and are sometimes followed with an else statement that provides a code to run if the latter condition is false. . Extends . Extends, as in the name, extend a java class. It inherits another class, which takes in the methods and attributes from another class and brings it elsewhere. After this, more methods and attributes are able to be added to this class. . A subclass is the class that inherits it. . A superclass is the class being inherited from. .",
            "url": "https://jz21324.github.io/Vcode/markdown/2022/09/06/code-org.html",
            "relUrl": "/markdown/2022/09/06/code-org.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "My First Post",
            "content": "My First Post . Welcome! . This is a website that will include different resources and posts of different coding languages, such as python and java. Along with this, there will be multiple blogs like this one that will comment on the progress of this website. .",
            "url": "https://jz21324.github.io/Vcode/markdown/2020/08/20/first_post.html",
            "relUrl": "/markdown/2020/08/20/first_post.html",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . Running cells with &#39;Python 3.8.10 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/bin/python3 -m pip install ipykernel -U --user --force-reinstall&#39; . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "An Example Markdown Post",
            "content": "An Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jz21324.github.io/Vcode/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jz21324.github.io/Vcode/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jz21324.github.io/Vcode/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}