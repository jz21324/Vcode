{
  
    
        "post0": {
            "title": "Title",
            "content": "import threading # import threading def keepUpdating(): # build a function to run over and over # global variable setup global run try: run except: run = 0 print(&quot;Seconds:&quot;, run) # replace this line with updates to data run += 1 # this is update to global variable threading.Timer(3.0, keepUpdating).start() keepUpdating() . Input In [22] global run ugiug ^ SyntaxError: invalid syntax . Seconds: 131 .",
            "url": "https://jz21324.github.io/Vcode/2022/11/06/incremation.html",
            "relUrl": "/2022/11/06/incremation.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Tri One Blog",
            "content": "Week 1 Learnings . I was pretty new to code but I learned about connecting GitHub to VSCode. This gave me a solid introduction to Computer Science. I also learned some basic Java code, such as creating a class and some basic commands. . public class Main { public static void main() { int a = 23; String b = &quot;Test&quot;; double c = 34.355; System.out.print(&quot;The &quot; + a + &quot; is an integer of &quot; + b + &quot; and a double of &quot; + c); } } Main.main(); . The 23 is an integer of Test and a double of 34.355 . public boolean almostEqual(double d1, double d2, double tolerance) { return Math.abs(d1-d2) &lt;= tolerance; } almostEqual(3.1102, 3.1116, 0.001) . false .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/04/blog-learnings-for-tri.html",
            "relUrl": "/jupyter/2022/11/04/blog-learnings-for-tri.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "FRQ 3a Arrays",
            "content": "public void addMembers(String[] names, int gradYear) { for (String a: names) { MemberInfo newM = new memberInfo (a, gradYear, true); memberList.add(newM); } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/26/arrays_frq.html",
            "relUrl": "/jupyter/2022/10/26/arrays_frq.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "FRQ 2019",
            "content": "public class StepTracker { private int minSteps; private int totalSteps; private int numDays; private int numActivateDays; public StepTracker (int threshold) { minSteps = threshold; totalSteps = 0; numDays = 0; numActiveDays = 0; } public void addDailySteps(int steps) { totalSteps += steps; numDays++; if (steps &gt;= minSteps) { numActiveDays++; } } public int activeDays() { return numActiveDays; } public double averageSteps() { if (numDays == 0) { return 0.0; } else { return (double) totalSteps / numDays; } } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/25/frq_2019_2.html",
            "relUrl": "/jupyter/2022/10/25/frq_2019_2.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Iteration Lesson Homework",
            "content": "public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letter = &quot;&quot;; public CaesarCipher(String message) { for (int i = 0; i &lt; message.length(); i++) { letter = message.substring(i, i + 1); if (letter.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letter.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letter.equals(letters[j])) { System.out.print(letters[(j + 3) % 26]); } if (letter.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } /*String oldLetter = message1.substring(i); System.out.println(oldLetter); int oldIndex = Arrays.asList(letters).indexOf(oldLetter); String newLetter = letters[(oldIndex + 3) % 26]; newMessage += newLetter; //System.out.println(message1.indexOf(letters[i+3])); */ } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/24/iteration-homework.html",
            "relUrl": "/jupyter/2022/10/24/iteration-homework.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "FRQ 2021",
            "content": "public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/17/objects-lesson-frq.html",
            "relUrl": "/jupyter/2022/10/17/objects-lesson-frq.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Learnings from Java Primitives lesson",
            "content": "Primitives . Booleans . true and false | one bit | . Integers . int values | 2-3 bits | . Double . decimal values | 64 bits | . boolean a = true; int b = 5; double c = 7.5; . Operators . addition: + subtraction: - division: / multiplication: * increase varaible by 1: ++ . int a = 5 + 10; int b = 20 - 5; int c = 45 / 3; int d = 5 * 3; System.out.println(a + b + c + d); . 60 . Video Learning Notes . Primitive Data Types in Java . A byte is just 8 bits. Int is used for integer values. Floats are used for values with few decimal digits, while doubles are used for values with many decimal digits. A boolean is used for false or true values. A char will have a single character. A string will have multiple characters. . byte a = 12; int b = 5; float c = 6.3f; double d = 7.344345542; boolean e = true; char f = &#39;W&#39;; String g = &quot;Hello&quot;; .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/17/java-primatives-learning.html",
            "relUrl": "/jupyter/2022/10/17/java-primatives-learning.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Recursion Lesson",
            "content": "public class RecursionExample1 { static void recursion() { System.out.println(&quot;hello&quot;); recursion(); } public static void main(String[] args) { recursion(); } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/13/recursion-lesson.html",
            "relUrl": "/jupyter/2022/10/13/recursion-lesson.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Array List",
            "content": "Arrays can be configured through .add, .get, .set, .sort, .clear, and more methods. The .add method adds an index to the array list and the .get calls the specific index number. The .set method sets the index to a new index. The .sort method sorts the indexes in a certain order and .clear will clear all the indexes in the array. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main() { ArrayList&lt;String&gt; sports = new ArrayList&lt;String&gt;(); //Creates a new array sports.add(&quot;Football&quot;); sports.add(&quot;Basketball&quot;); //adds different sports to the array sports.add(&quot;Soccer&quot;); sports.add(&quot;Baseball&quot;); sports.add(&quot;Tennis&quot;); System.out.println(sports); // prints the array System.out.println(&quot; &quot;); for (int i = 0; i &lt; 5; i++) { System.out.println(sports.get(i)); // prints each array separately } System.out.println(&quot; &quot;); System.out.println(&quot;The size of the array is &quot; + sports.size()); //prints the size of the array sports.set(3, &quot;Golf&quot;); // changes the 3 array to &quot;Golf&quot; System.out.println(&quot;The 3 array has been changed to &quot; + sports.get(3)); System.out.println(&quot; &quot;); Collections.sort(sports); //sorts the array in alphabetical order System.out.println(&quot;The array list is in alphabetical order:&quot;); for (String i : sports) { System.out.println(i); } System.out.println(&quot; &quot;); sports.clear(); //clears the array System.out.println(&quot;The array list is now empty and says:&quot; + sports); } } Main.main(); . [Football, Basketball, Soccer, Baseball, Tennis] Football Basketball Soccer Baseball Tennis The size of the array is 5 The 3 array has been changed to Golf The array list is in alphabetical order: Basketball Football Golf Soccer Tennis The array list is now empty and says:[] .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/07/array_list.html",
            "relUrl": "/jupyter/2022/10/07/array_list.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "POJO and API",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/06/pojo.html",
            "relUrl": "/jupyter/2022/10/06/pojo.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Arrays and Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class imageDemo { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { String name = &quot;pepsi-logo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } imageDemo.main(null); . javax.imageio.IIOException: Can&#39;t read input file! at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1308) at REPL.$JShell$16$imageDemo.main($JShell$16.java:30) at REPL.$JShell$17.do_it$($JShell$17.java:19) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics Pepsi = new Pics(&quot;Pepsi&quot;, &quot;png&quot;); Pepsi.printStats(&quot;Original&quot;); Pepsi.resize(25); Pepsi.printStats(&quot;Scaled&quot;); Pepsi.convertToAscii(); } } Pics.main(null); . Original: 21235 300x300 images/Pepsi.png Scaled: 3281 75x75 images/tmp/Pepsi.png .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/28/arrays_images.html",
            "relUrl": "/jupyter/2022/09/28/arrays_images.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "JavaScript",
            "content": "console.log(&quot;Hello World!&quot;); . Hello World! . var speak = &quot;Hello World&quot;; console.log(speak); . Hello World . function logIt(output) { console.log(output); } logIt(speak); . Hello World . console.log(&quot;Welcome!&quot;) logIt(&quot;Hello Students!&quot;); logIt(2022) . Welcome! Hello Students! 2022 . Team Roles . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;Scrum Master&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var scrummaster = new Person(&quot;Jazair Tallman&quot;, &quot;@jz21324&quot;, 2024); // object type is easy to work with in JavaScript logIt(scrummaster); // before role logIt(scrummaster.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher scrummaster.setRole(&quot;Scrum Master&quot;); // set the role logIt(scrummaster); logIt(scrummaster.toJSON()); . Person { name: &#39;Jazair Tallman&#39;, ghID: &#39;@jz21324&#39;, classOf: 2024, role: &#39;Scrum Master&#39; } {&#34;name&#34;:&#34;Jazair Tallman&#34;,&#34;ghID&#34;:&#34;@jz21324&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Scrum Master&#34;} Person { name: &#39;Jazair Tallman&#39;, ghID: &#39;@jz21324&#39;, classOf: 2024, role: &#39;Scrum Master&#39; } {&#34;name&#34;:&#34;Jazair Tallman&#34;,&#34;ghID&#34;:&#34;@jz21324&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Scrum Master&#34;} .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/26/java_script.html",
            "relUrl": "/jupyter/2022/09/26/java_script.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Fibonacci Sequence",
            "content": "Fibo With For Loop . First I made an abstract class because I can&#39;t make an instance and only extend with a subclass. . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* * Zero parameter constructor uses Telescoping technique to allow setting of the * required value nth * * @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* * Construct the nth fibonacci number * * @param: nth number, the value is constrained to 92 because of overflow in a * long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); // initialize fibonacci and time mvc this.init(); } /* * This Method should be &quot;abstract&quot; * Leave method as protected, as it is only authorized to extender of the class * Make new class that extends and defines init() * Inside references within this class would change from this to super * Repeat process using for, while, recursion */ protected abstract void init(); /* * Number is added to fibonacci sequence, current state of &quot;list&quot; is added to * hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* * Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* * Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* * Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i = 0; i &lt; this.size; i++) { System.out.println(&quot;fibonacci Sequence &quot; + (i + 1) + &quot; = &quot; + this.getNthSeq(i)); } } } . For Loop . public class FiboFor extends Fibo { public FiboFor() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboFor(int nth) { super(nth); } @Override protected void init() { this.name = &quot;For&quot;; long f[] = new long[] { 0, 1 }; for (int i = 0; i &lt; size; i++) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; } } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . While Loop . import java.util.ArrayList; import java.util.HashMap; public class FiboWhile extends Fibo { public FiboWhile() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboWhile(int nth) { super(nth); } @Override protected void init() { this.name = &quot;While&quot;; long f[] = new long[] { 0, 1 }; int i = 0; while (i &lt; size) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; i++; } } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Recursion . import java.util.ArrayList; import java.util.HashMap; public class FiboRecursion extends Fibo { public FiboRecursion() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboRecursion(int nth) { super(nth); } @Override protected void init() { this.name = &quot;Recursion&quot;; for (int i = 0; i &lt; size; i++) { setData(fiboRecursion(i)); } } private long fiboRecursion(long n) { if (n &lt;= 1) { return n; } return (fiboRecursion(n - 1) + fiboRecursion(n - 2)); } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRecursion fib = new FiboRecursion(); fib.print(); } } FiboRecursion.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/26/fibonacci.html",
            "relUrl": "/jupyter/2022/09/26/fibonacci.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "FRQ 2019",
            "content": "1. The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . Answer: . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) {} int count = 0; for (int i = year1; i &lt;= year2; i++) { if (isLeapYear(i)) { count++; } return count; } } . In this problem I created a loop so that it would go through all the years that are in between year1 and year2. Then inside of that I put a if statement to decide if there was a leap year. If yes, count would be increased by 1. . (b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar | private static boolean isLeapYear(int year) | public static int numberOfLeapYears(int year1, int year2) | private static int firstDayOfYear(int year) | private static int dayOfYear(int month, int day, int year) | public static int dayOfWeek(int month, int day, int year) | . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . Answer: . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int day = dayOfYear(month, day, year); return (firstDay + day - 1) % 7; } . For this, I created two variables and set them to the firstDayOfYear and dayOfYear. After that, I added the two values together and subtracted 1. The % 7 is what the remainder is. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/20/frq1_2019.html",
            "relUrl": "/jupyter/2022/09/20/frq1_2019.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Iteration with 2D Array",
            "content": "class CarLoop { String [][] car; public CarLoop() { car = new String[][]{ { &quot; &quot;, &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot;( _ _ _ &quot;, &quot;=`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; _/ ______ __ &quot;, &quot; / -. -|- ,-.`-. &quot;, &quot; `( o )-( o )-&#39; &quot;, &quot; `-&#39; `-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; _________________________ &quot;, &quot; | | | | | | &quot;, &quot; |___|_____|_____|____|_|___ &quot;, &quot; | | | &quot;, &quot; `--(o)(o)--(o)--&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; _____________ &quot;, &quot; ||______][__ ____ &quot;, &quot; |o _ |- | _ o)&quot;, &quot; &#39;(_)-(_) &#39;&quot;, &quot;===============================================================&quot; }, }; } public void printRace() { System.out.println(); System.out.println(&quot;Car drivng down in Java Loop&quot;); int carPlace = 4; for (int i = carPlace; i &gt;= 1; i--) { System.out.println(i + &quot; cars left in the race&quot;); for (int row = 0; row &lt; carPlace; row++) { for (int col = 0; col &lt; car[row].length; col++) { System.out.println(car[row][col] + &quot; &quot;); } } carPlace -= 1; } } public static void main(String[] args) { new CarLoop().printRace(); } } CarLoop.main(null); . Car drivng down in Java Loop 4 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== _/ ______ __ / -. -|- ,-.`-. `( o )-( o )-&#39; `-&#39; `-&#39; =============================================================== _________________________ | | | | | | |___|_____|_____|____|_|___ | | | `--(o)(o)--(o)--&#39; =============================================================== _____________ ||______][__ ____ |o _ |- | _ o) &#39;(_)-(_) &#39; =============================================================== 3 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== _/ ______ __ / -. -|- ,-.`-. `( o )-( o )-&#39; `-&#39; `-&#39; =============================================================== _________________________ | | | | | | |___|_____|_____|____|_|___ | | | `--(o)(o)--(o)--&#39; =============================================================== 2 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== _/ ______ __ / -. -|- ,-.`-. `( o )-( o )-&#39; `-&#39; `-&#39; =============================================================== 1 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== . Hacks . Build you own Jupyter Notebook. Feel free to use any ASCII art of your choice, there are some much better ones here. My little guys were made up out of my head while looking at unicode characters. . Print monkeys horizontally versus vertically. | Build more or entire rhyme for the &quot;Monkey Jumpers&quot; countdown poem | Add names or other properties to the monkeys | . In you notebook, illustrate or answer some of these questions. . Is this program in more of an Imperative Programming Style or OOP style? Explain. Observe variable assignments. . Is each Monkey an object? Build an where the monkey is an object versus two-dimensional array. This would be leading into Unit 5 requirements. . | Study loops and zero based counting Study two-dimensional (2D) array references Explain different way you can access a 2D array . | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/12/iteration_2Darray.html",
            "relUrl": "/jupyter/2022/09/12/iteration_2Darray.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Focuses and Habits",
            "content": "Focuses and Habits . Focuses . School . Grades | SAT Prep | AP Exams | . Extracurriculars . School clubs: Robotics, NHS, SACS | Soccer | . Habits . Work harder and more efficiently | Plan better | Volunteer more often | Apply for more leadership roles | . Harvard Video . Notes: It is highly important to maintain a low stress level. To do this I need to take breaks from class work and spend time to do a hobby or something that I like and that can relieve stress. Most colleges cause a lot of stress to their students. . Note of gratitude: Dear Mr. Krenz, I am eternally grateful for your math teachings. You have helped me be the great mathmatician I am today. You are and will always be the best teacher there is. Thank you! . Goals: . Get straight A’s | Participate in multiple clubs | Connect with more people | .",
            "url": "https://jz21324.github.io/Vcode/markdown/2022/09/11/focus-habits.html",
            "relUrl": "/markdown/2022/09/11/focus-habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Code.org OOP",
            "content": "Code.org OOP . Proof of completion . ![]code.org2_pic.png) . Classes and Objects . Classes are a way to create and store objects and their data types and methods. They contain data, such as variables and actions, such as methods. . Instances . Instances are variables that are non-static and belong to a certain class. To create the, an object has to be instantiated to all methods in that class. . Loop Statements . Java has if and while statements that allow for code to be executed with a specific condition. . For a while loop, if the condition is true, the code will continue to run until that same condition is false. . For an if statement, the code will only run once if the condition is true. If statements can and are sometimes followed with an else statement that provides a code to run if the latter condition is false. . Extends . Extends, as in the name, extend a java class. It inherits another class, which takes in the methods and attributes from another class and brings it elsewhere. After this, more methods and attributes are able to be added to this class. . A subclass is the class that inherits it. . A superclass is the class being inherited from. .",
            "url": "https://jz21324.github.io/Vcode/markdown/2022/09/06/code-org.html",
            "relUrl": "/markdown/2022/09/06/code-org.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Java Primitives Demonstration",
            "content": "int b = 10; boolean c = false; System.out.println(&quot;The integer is &quot; + b + &quot; and the boolean is &quot; + c) . The integer is 10 and the boolean is false .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/05/java_primitives.html",
            "relUrl": "/jupyter/2022/09/05/java_primitives.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "If Else Statement Lesson",
            "content": "If Statement . The if statement is used to test whether a condition is met or not. If the condition is true, the following command will be run. . boolean a = true; // Set the boolean to &quot;true&quot; if (a = false) { System.out.println(&quot;This is false&quot;); // Will run if a is false } if (a = true) { System.out.println(&quot;This is true&quot;); // Will run if a is true } . This is true . If-else Statement . The if-else statement will run a piece of code if a certain condition is met. If this condition is not met then another command will be run. . boolean b = false; // Set the boolean to &quot;false&quot; if (b = true) { System.out.println(&quot;b is true&quot;); } else { System.out.println(&quot;b is not true&quot;); } // The if condition is not met so the else statement is ran . b is true . If-elseif-else Statement . An if-elseif-else statement will determine whether a certain condition is true. If it isn&#39;t it will go to the next elseif statement and do the same thing. If this condition is also false then it will go down and continue to go through conditions until one is true. . boolean c = true; // Sets the boolean to &quot;true&quot; if (c = false) { System.out.println(&quot;The first if statement is true&quot;); // If the if condition is not true then it will not run } else if (c = !true) { System.out.println(&quot;This else if statement is true&quot;); } else if (c = false &amp;&amp; true) { System.out.println(&quot;This else if statement is true&quot;); } else if (c = !(!false || !true)) { System.out.println(&quot;This else if statement is true&quot;); // If the else if condition is not true then then it will not run } else { System.out.println(&quot;None of the other conditions were true&quot;); // None of the if statements or else if statements are true so the else statement will run } . None of the other conditions were true . If-elseif-else statement (5 or more conditions) . int stars = 3; // The integer &quot;stars&quot; is determined to be 3 if (stars &lt;= 0) { System.out.println(&quot;You got ☆☆☆☆☆&quot;); } else if (stars &lt;= 1) { System.out.println(&quot;You got ★☆☆☆☆&quot;); } else if (stars &lt;= 2) { System.out.println(&quot;You got ★★☆☆☆&quot;); } else if (stars &lt;= 3) { System.out.println(&quot;You got ★★★☆☆&quot;); } else if (stars &lt;= 4) { System.out.println(&quot;You got ★★★★☆&quot;); } else { System.out.println(&quot;You got ★★★★★&quot;); } // The code goes through the if and else if conditions to figure out how many stars to show. . You got ★★★☆☆ . Switch Case . A switch case is able to run one statement after choosing one from multiple statements. This makes it similar to an else-if ladder where it will go through mulitple conditions to see which is true. . When making a switch case code, it is important that you make sure no two cases have the same value and that the same variable is used for all the cases. . int stars = 4; // The integer &quot;stars&quot; is determined to be 3 switch (stars) { // A switch statement that takes in the &quot;stars&quot; integer case 1: // When there are 0 stars System.out.println(&quot;You got ☆☆☆☆☆&quot;); break; case 2: // When there is 1 star System.out.println(&quot;You got ★☆☆☆☆&quot;); break; case 3: // When there are 2 stars System.out.println(&quot;You got ★★☆☆☆&quot;); break; case 4: // When there are 3 stars System.out.println(&quot;You got ★★★☆☆&quot;); break; case 5: // When there are 4 stars System.out.println(&quot;You got ★★★★☆&quot;); break; default: //When none of the other cases are met so there are 5 stars System.out.println(&quot;You got ★★★★★&quot;); } . You got ★★★☆☆ . De Morgan&#39;s Law . De Morgan&#39;s Law states that the &quot;!&quot; symbol will negate an And statement and an Or statement. This means that if a condition is written as a || b, !(a || b) would really be a &amp;&amp; b. This goes for the other way around where !(a &amp;&amp; b) is a || b. It will also cause a true statement to be false with !(true) and vice versa. . boolean child = true; boolean hungry = false; if (!(child &amp;&amp; hungry)) { System.out.println(&quot;You have a hungry child&quot;); } else { System.out.println(&quot;Who knows what&#39;s going on?&quot;); } . You have a hungry child . boolean fruit = true; boolean red = true; if (!(!(fruit) || !(red))) { System.out.println(&quot;It&#39;s probably a red apple&quot;); } else { System.out.println(&quot;You have an unknown food&quot;); } . It&#39;s probably a red apple . Resources used . CodeHS | simplilearn | w3schools |",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/05/if_else_lesson.html",
            "relUrl": "/jupyter/2022/09/05/if_else_lesson.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Java Objects Demonstration",
            "content": "Objects . The code creates a public class called &quot;Student&quot;, which takes in three different instance variables: class, teacher, and period. With these a string of &quot;AP Computer Science A&quot;, another string of &quot;Mr. Mortensen&quot;, and an integer of 2 are put together to print out the statement, &quot;I have AP Computer Science A for Mr. Mortensen in period 2&quot; . public class Student { // instance variables public String class; public String teacher; public int period; public Student (String class, String teacher, int period) { this.class = class; this.teacher = teacher; this.period = period; } public static void main(String[] args) { Student s = new Student(&quot;AP Computer Science A&quot;, &quot;Mr. Mortensen&quot;, 2); system.out.println(&quot;I have &quot; + s.teacher &quot; for &quot; + s.class + &quot; in period &quot; + s.period); } } . | public String class; &lt;identifier&gt; expected | public String class; &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { invalid method declaration; return type required | public Student (String class, String teacher, int period) { &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { &#39;;&#39; expected | this.class = class; &lt;identifier&gt; expected | this.class = class; illegal start of expression | this.class = class; &lt;identifier&gt; expected | this.teacher = teacher; illegal start of type | this.teacher = teacher; &#39;;&#39; expected | this.teacher = teacher; &lt;identifier&gt; expected | this.period = period; illegal start of type | this.period = period; &#39;;&#39; expected | this.period = period; &lt;identifier&gt; expected | public static void main(String[] args) { illegal start of expression | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); &#39;)&#39; expected | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); not a statement | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); &#39;;&#39; expected | } reached end of file while parsing . Hacks . Explain where a Class is defined . A class is defined where you need variables, objects, or methods to be added to your code | . Explain where an instances of a Class is defined . An instance is defined in a Class as an object. | . Explain where an object is Calling a Method . An object can call a method when the action is needed to be used for the code to go through. | . Explain where an object is Mutating data . An object is mutation data when there is a change in the original data. | . Describe Console, GUI differences, or Code.org differences. . A console is where the user input and gets outputs. | Ex: Bash shell . | A GUI is more clickable and user-friendly. There is also visual feedback and display. . | Code.org used a painter as the visual object which shows the user what the code is doing. It has a public class as &quot;MyNeighborhood&quot;. To call a method, you put &quot;variableName.methodName();&quot;. . | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/29/java_objects.html",
            "relUrl": "/jupyter/2022/08/29/java_objects.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Python Notebook",
            "content": "message = &quot;Hello World&quot; print(message) . Hello World .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/python_nb.html",
            "relUrl": "/jupyter/2022/08/22/python_nb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Notes",
            "content": "Unit 1: Primitives . Primitives are datatypes that are built into java. The different datatypes are int, float, long, double, boolean, char, byte, and short. When it is lower case, it is primitive and when it is uppercase, it is part of a wrapper class. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/notes.html",
            "relUrl": "/jupyter/2022/08/22/notes.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello Java world!&quot;) . Hello Java world! .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/java_nb.html",
            "relUrl": "/jupyter/2022/08/22/java_nb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Bash Check",
            "content": "python --version; . Python 3.9.12 .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/bash_checks.html",
            "relUrl": "/jupyter/2022/08/22/bash_checks.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "My First Post",
            "content": "My First Post . Welcome! . This is a website that will include different resources and posts of different coding languages, such as python and java. Along with this, there will be multiple blogs like this one that will comment on the progress of this website. .",
            "url": "https://jz21324.github.io/Vcode/markdown/2020/08/20/first_post.html",
            "relUrl": "/markdown/2020/08/20/first_post.html",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post25": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . Running cells with &#39;Python 3.8.10 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/bin/python3 -m pip install ipykernel -U --user --force-reinstall&#39; . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post26": {
            "title": "An Example Markdown Post",
            "content": "An Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jz21324.github.io/Vcode/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jz21324.github.io/Vcode/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jz21324.github.io/Vcode/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}