{
  
    
        "post0": {
            "title": "Data Sorting",
            "content": "Bubble Sort . public class BubbleSort { public static Object[] bubbleSort(int[] arr) { int n = arr.length; int compare = 0; int swap = 0; // iterate through each element in the array for (int i = 0; i &lt; n-1; i++) { // compare adjacent elements in the array for (int j = 0; j &lt; n-i-1; j++) { // if the element on the left is greater than the element on the right compare ++; if (arr[j] &gt; arr[j+1]) { // swap the two elements int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; swap ++; } } } Object[] result = { arr, swap, compare }; return result; // System.out.println(&quot;Number of compares: &quot; + compare); // System.out.println(&quot;Number of swaps: &quot; + swap); } public static void main(String[] args) { // create an array of integers int[] arr = new int[50]; // initialize array with size 20 int[] arr2 = new int[50]; for (int j = 0; j &lt; 50; j++) { arr[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } Object[] result = bubbleSort(arr); long startTime = System.nanoTime(); bubbleSort(arr); long endTime = System.nanoTime(); long duration = (endTime - startTime); long totalTime = 0; for (int i = 0; i &lt; 5000; i++) { long startTime2 = System.nanoTime(); for (int j = 0; j &lt; 50; j++) { arr2[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } bubbleSort(arr2); long endTime2 = System.nanoTime(); totalTime += (endTime2 - startTime2); } long avgTime = totalTime / 5000; // print out the sorted array System.out.println(&quot;Sorted array:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr2[i] + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Number of swaps: &quot; + result[1]); System.out.println(&quot;Number of compares: &quot; + result[2]); System.out.println(&quot;Time taken for one run: &quot; + duration + &quot; nanoseconds&quot;); System.out.println(&quot;Average time taken for 5000 runs: &quot; + avgTime + &quot; nanoseconds&quot;); } } BubbleSort.main(null); . Sorted array: 19 70 87 100 108 131 184 212 215 237 254 265 288 345 348 372 377 408 422 445 463 480 496 557 559 600 607 635 642 705 708 737 782 782 787 789 796 814 819 885 887 901 915 918 931 939 941 968 969 992 Number of swaps: 650 Number of compares: 1225 Time taken for one run: 88600 nanoseconds Average time taken for 5000 runs: 37588 nanoseconds . Bubble Sort Analysis . sort compares left element to right element | if element is greater than the right then it will swap | continues cycling through elements until no more swaps happen | the complexity of bubble sort is O(n^2) which is relatively not that efficient | . Selection Sort . public class SelectionSort { public static Object[] selectionSort(int[] arr) { int n = arr.length; int compare = 0; int swap = 0; // iterate through each element in the array for (int i = 0; i &lt; n-1; i++) { // find the minimum element in the unsorted part of the array int minIndex = i; for (int j = i+1; j &lt; n; j++) { compare ++; if (arr[j] &lt; arr[minIndex]) { minIndex = j; swap ++; } } // swap the minimum element with the first element in the unsorted part of the array int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; } Object[] result = { arr, swap, compare }; return result; } public static void main(String[] args) { // create an array of integers int[] arr = new int[50]; // initialize array with size 20 int[] arr2 = new int[50]; for (int j = 0; j &lt; 50; j++) { arr[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } Object[] result = selectionSort(arr); long startTime = System.nanoTime(); selectionSort(arr); long endTime = System.nanoTime(); long duration = (endTime - startTime); long totalTime = 0; for (int i = 0; i &lt; 5000; i++) { long startTime2 = System.nanoTime(); for (int j = 0; j &lt; 50; j++) { arr2[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } selectionSort(arr2); long endTime2 = System.nanoTime(); totalTime += (endTime2 - startTime2); } long avgTime = totalTime / 5000; // print out the sorted array System.out.println(&quot;Sorted array:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr2[i] + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Number of swaps: &quot; + result[1]); System.out.println(&quot;Number of compares: &quot; + result[2]); System.out.println(&quot;Time taken for one run: &quot; + duration + &quot; nanoseconds&quot;); System.out.println(&quot;Average time taken for 5000 runs: &quot; + avgTime + &quot; nanoseconds&quot;); } } SelectionSort.main(null); . Sorted array: 2 7 50 57 74 85 92 101 134 156 160 163 193 195 240 319 329 333 364 379 415 446 472 478 485 504 520 562 600 611 626 636 641 704 730 747 759 763 767 771 787 834 840 844 870 894 946 960 987 992 Number of swaps: 143 Number of compares: 1225 Time taken for one run: 73600 nanoseconds Average time taken for 5000 runs: 23885 nanoseconds . Selection Sort Analysis . will take the first number and find the lowest value in the entire array and swap with that number | then it will take the next number in line and swap with the next lowest value | time complexity of selection sort is also O(n^2) but a little bit better than bubble sort | . Insertion Sort . public class InsertionSort { public static Object[] insertionSort(int[] arr) { int n = arr.length; int compare = 0; int swap = 0; // iterate through each element in the array for (int i = 1; i &lt; n; i++) { // insert the i-th element into the correct position in the sorted part of the array int key = arr[i]; int j = i - 1; compare ++; while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j+1] = arr[j]; j--; swap ++; } arr[j+1] = key; } Object[] result = { arr, swap, compare }; return result; } public static void main(String[] args) { // create an array of integers int[] arr = new int[50]; // initialize array with size 20 int[] arr2 = new int[50]; // sort the array using the insertionSort function for (int j = 0; j &lt; 50; j++) { arr[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } Object[] result = insertionSort(arr); long startTime = System.nanoTime(); insertionSort(arr); long endTime = System.nanoTime(); long duration = (endTime - startTime); long totalTime = 0; for (int i = 0; i &lt; 5000; i++) { long startTime2 = System.nanoTime(); for (int j = 0; j &lt; 50; j++) { arr2[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } insertionSort(arr2); long endTime2 = System.nanoTime(); totalTime += (endTime2 - startTime2); } long avgTime = totalTime / 5000; // print out the sorted array System.out.println(&quot;Sorted array:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr2[i] + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Number of swaps: &quot; + result[1]); System.out.println(&quot;Number of compares: &quot; + result[2]); System.out.println(&quot;Time taken for one run: &quot; + duration + &quot; nanoseconds&quot;); System.out.println(&quot;Average time taken for 5000 runs: &quot; + avgTime + &quot; nanoseconds&quot;); } } InsertionSort.main(null); . Sorted array: 10 69 82 153 161 202 206 207 223 252 262 278 286 287 330 342 353 374 390 405 432 444 472 479 493 511 539 543 557 578 615 627 694 707 708 746 748 763 799 800 806 811 819 864 876 877 896 907 933 969 Number of swaps: 689 Number of compares: 49 Time taken for one run: 9600 nanoseconds Average time taken for 5000 runs: 21731 nanoseconds . Insertion Sort . starts with second element | compares element with left and if smaller then swaps and if not stays | then takes next element and if smaller than first element, but bigger than the next, it will insert itself between the two elements | once again has a O(n^2) complexity but it is still faster than the bubble and selection sorts because there isn&#39;t as many swaps and comparisons | . Merge Sort . public class MergeSort { private static int compare = 0; private static int swap = 0; public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { // find the middle point int middle = (left + right) / 2; // recursively sort the left and right subarrays mergeSort(arr, left, middle); mergeSort(arr, middle + 1, right); // merge the sorted subarrays merge(arr, left, middle, right); } } public static void merge(int[] arr, int left, int middle, int right) { // find the sizes of the two subarrays int n1 = middle - left + 1; int n2 = right - middle; // create temporary arrays for the left and right subarrays int[] leftArray = new int[n1]; int[] rightArray = new int[n2]; // copy the elements of the left and right subarrays into the temporary arrays for (int i = 0; i &lt; n1; ++i) { leftArray[i] = arr[left + i]; } for (int j = 0; j &lt; n2; ++j) { rightArray[j] = arr[middle + 1 + j]; } // merge the two temporary arrays back into the original array int i = 0, j = 0; int k = left; while (i &lt; n1 &amp;&amp; j &lt; n2) { compare ++; if (leftArray[i] &lt;= rightArray[j]) { arr[k] = leftArray[i]; i++; } else { arr[k] = rightArray[j]; j++; } k++; swap ++; } // copy any remaining elements from the left and right subarrays into the original array while (i &lt; n1) { arr[k] = leftArray[i]; i++; k++; swap ++; } while (j &lt; n2) { arr[k] = rightArray[j]; j++; k++; swap ++; } } public static void main(String[] args) { // create an array of integers int[] arr = new int[50]; // initialize array with size 20 int[] arr2 = new int[50]; int n = arr.length; for (int j = 0; j &lt; 50; j++) { arr[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } // sort the array using the mergeSort function mergeSort(arr, 0, n - 1); long startTime = System.nanoTime(); mergeSort(arr, 0, n - 1); long endTime = System.nanoTime(); long duration = (endTime - startTime); // print out the sorted array System.out.println(&quot;Sorted array:&quot;); for (int i = 0; i &lt; n; ++i) { System.out.print(arr[i] + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Time taken for one run: &quot; + duration + &quot; nanoseconds&quot;); // measure the time it takes to sort the array using the mergeSort function 5000 times long totalDuration = 0; for (int i = 0; i &lt; 5000; i++) { long startTime2 = System.nanoTime(); for (int j = 0; j &lt; 50; j++) { arr2[j] = (int) (Math.random() * 1000); // generate a random integer between 0 and 999 } mergeSort(arr2, 0, n - 1); long endTime2 = System.nanoTime(); totalDuration += (endTime2 - startTime2); } // calculate the average time it takes to sort the array and print it out long avgDuration = totalDuration / 5000; System.out.println(&quot;Number of swaps: &quot; + swap); System.out.println(&quot;Number of compares: &quot; + compare); System.out.println(&quot;Average time taken for 5000 runs: &quot; + avgDuration + &quot; nanoseconds&quot;); } } MergeSort.main(null); . Sorted array: 13 24 54 68 89 109 131 164 179 179 181 183 221 227 233 244 304 309 326 329 369 389 396 404 409 461 471 489 563 594 597 607 645 718 734 736 743 768 772 817 829 910 914 929 930 963 966 972 977 993 Time taken for one run: 111800 nanoseconds Number of swaps: 1430572 Number of compares: 1110116 Average time taken for 5000 runs: 41563 nanoseconds . Merge Sort Analysis . divides array in two halves | then divides again until only one element | compares the elements and merges them into order | then merges others elements all together | fastest of these with a time complexity of O(n log(n)) which is much more efficient than the other sorts | . Hash Map vs. Binary Search . import java.util.HashMap; import java.util.Random; public class Search { public static void main(String[] args) { HashMap&lt;Integer, Integer&gt; hashmap = new HashMap&lt;Integer, Integer&gt;(); int[] list = new int[5000]; Random rand = new Random(); // Add random integer values between 0 and 5000 to the &#39;hashmap&#39; and &#39;list&#39;. for (int i = 0; i &lt; list.length; i++) { Integer value = rand.nextInt(5000); hashmap.put(value, value); list[i] = value; } long hashTotalTime = 0; long binaryTotalTime = 0; // Search for a new random value 5000 times using hashmap and binary search. for (int i = 0; i &lt; 5000; i++) { int searchValue = rand.nextInt(5000); // Measure the time it takes to look up the search value in the &#39;hashmap&#39; using the &#39;lookUp&#39; method. long hashTime = lookUp(hashmap, searchValue); hashTotalTime += hashTime; // Measure the time it takes to search for the search value in the &#39;list&#39; using the binary search algorithm // implemented in the &#39;binarySearchTime&#39; method. long binaryTime = binarySearchTime(list, searchValue); binaryTotalTime += binaryTime; } // Calculate the average time taken for each search operation using hashmap and binary search. double hashAvgTime = (double) hashTotalTime / 5000; double binaryAvgTime = (double) binaryTotalTime / 5000; System.out.println(&quot;Hashmap search average time: &quot; + hashAvgTime + &quot; nanoseconds&quot;); System.out.println(&quot;Binary search average time: &quot; + binaryAvgTime + &quot; nanoseconds&quot;); } // This method takes a HashMap&lt;Integer, Integer&gt; object and an Integer value as parameters, // and measures the time it takes to check if the HashMap contains the given value. public static long lookUp(HashMap&lt;Integer, Integer&gt; hashmap, Integer value) { long start = System.nanoTime(); hashmap.containsKey(value); // Check if the HashMap contains the given value. long end = System.nanoTime(); return (end - start); } public static long binarySearchTime(int[] list, Integer value) { long start = System.nanoTime(); int low = 0; int high = list.length - 1; int middle = (low + high) / 2; while (low &lt;= high) { if (list[middle] &lt; value) { // If the middle element is less than the target value: low = middle + 1; // Discard the lower half of the array. } else if (list[middle] == value) { // If the middle element is equal to the target value: break; // The target value has been found. } else { // If the middle element is greater than the target value: high = middle - 1; // Discard the upper half of the array. } middle = (low + high) / 2; // Update the middle index to the midpoint of the remaining search space. } long end = System.nanoTime(); return (end - start); } } Search.main(null); . Hashmap search average time: 2425.36 nanoseconds Binary search average time: 2309.36 nanoseconds . Hash Map and Binary Search Analysis . Hashmap has a Big O speed of O(1) while binary Search has a Big O speed of O(log n) which is faster | Hashmap can have more collisions which causes a slower search | Binary search can thus sometimes be faster than a hashmap | . Pros Cons . Hash maps | O(1) lookup time for key-value pairs (on average) | Can result in collisions, leading to slower lookup times | . | Can handle a large amount of data efficiently | Hash maps are not sorted, so sorting or iterating over keys can be slower than in other data structures | . | Can be used for both read and write operations | Hash maps can take up more memory than other data structures due to the need for the hash table | . | . Binary searches | O(log n) lookup time, which is faster than linear search | Binary searches require that the data be sorted, which can take time to do if the data changes frequently | . | Can be used on sorted arrays or lists | Binary searches are not efficient for insertions and deletions, since the entire array may need to be shifted | . | Can be used to find the nearest value to a given value | Binary searches do not work well with non-unique values, since they only return the index of the first occurrence | . | Can be used to find ranges of values that meet a certain condition | | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/04/25/sorts.html",
            "relUrl": "/jupyter/2023/04/25/sorts.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Monkeys Hacks",
            "content": "Hack: Create method that sets all elements in array to n . void setArray(int[] arr, int n) { // your code here } int[] array = new int[10]; setArray(array, 10); for (int i = 0; i &lt; array.length; i++) { array[i] = 10; System.out.println(array[i]); } // Should print all 10s when working properly . Hack: Write an array to find the average of an array . //Example finding the max in an array. //Finds the maximum in an array public static int average(int[] array) { // put your code here int total = 0; for (int i = 0; i &lt; array.length; i++) { total += array[i]; } return total / array.length; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 10 System.out.println(average(test)); . Hack: Find the average number of a diagonal in a 2d array . For example, here find the average of the bolded #s 1 2 3 4 5 6 7 8 9 1 2 3 . public static int averageDiagonal (int[][] arr) { int total = 0; int count = 0; for (int row = 0; row &lt; arr.length; row++){ for (int col = 0; col &lt; arr[row].length; col++){ if (row == col) { total += arr[row][col]; count ++; } } } return total / count; } int[][] arr = { {1,2,3,4,5,6}, {7,8,9,10,11,12}, {0,1,2,3,4,5}, {10,11,12,13,14,15}, {15,16,17,18,19,20} }; System.out.println(averageDiagonal(arr)); . 8 .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/04/25/monkeys-hacks.html",
            "relUrl": "/jupyter/2023/04/25/monkeys-hacks.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Macro Monkeys FRQs",
            "content": "2018 CSA FRQ . public class ArrayTester { public static int[] getColumn (int[][] arr2D, int c) { int[] newArray = new int[arr2D.length]; for (int r = 0; r &lt; arr2D.length; r++) { newArray[r] = arr2D[r][c]; } return newArray; } public static boolean hasAllValues(int[] arr1, int[] arr2) { // always true simply for testing return true; } public static boolean containsDuplicates(int[] arr) { return false; } public static boolean isLatin(int[][] square) { // check rows of square for duplicates for (int i = 0; i &lt; square.length; i++) { if (containsDuplicates(square[i])) { return false; } // compare rows against row 0, return false if not the same if (!hasAllValues(square[0], square[i])) { return false; } } // check columns for duplicates for (int i = 0; i &lt; square[0].length; i++) { // get column at index int[] col = getColumn(square, i); // check for duplicates in col if (containsDuplicates(col)) { return false; } // compare columns against column 0, return false if not the same if (!hasAllValues(getColumn(square, 0), col)) { return false; } } // if passes all checks return true return true; } public static void main(String[] args) { int[][] arr2D = { {0,1,2}, {3,4,5}, {6,7,8}, {9,5,3} }; int[] newArray = ArrayTester.getColumn(arr2D, 1); for (int i = 0; i &lt; newArray.length; i++) { System.out.print(newArray[i] + &quot; &quot;); } int[][] latinSq = { {1,2,3}, {2,3,1}, {3,1,2} }; System.out.println(&quot;&quot;); System.out.println(&quot;Is latin: &quot; + isLatin(latinSq)); } } ArrayTester.main(null); . 1 4 7 5 Is latin: true . 2017 FRQ 4 . public class Position { int r; int c; public Position(int row, int col) { this.r = row; this.c = col; } public String toString() { String s = &quot;(&quot; + this.r + &quot;,&quot; + this.c + &quot;)&quot;; return s; } public static Position findPosition(int val, int[][] arr) { // double for loop to iterate through rows and columns inside each row for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { if (val == arr[i][j]) { Position p = new Position(i,j); return p; } } } return null; } public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] newArr = new Position[intArr.length][intArr[0].length]; for (int row=0; row &lt; intArr.length; row++) { for (int col=0; col &lt; intArr[0].length; col++) { newArr[row][col] = findPosition(intArr[row][col]+1, intArr); } } return newArr; } public static void main(String[] args) { int[][] arr = { {15,5,9,10}, {12,16,11,6}, {14,8,13,7} }; Position[][] successor = getSuccessorArray(arr); System.out.println(findPosition(9, arr)); for (int i = 0; i &lt; successor.length; i++) { System.out.println(&quot;&quot;); for (int j = 0; j &lt; successor[i].length; j++) { System.out.print(successor[i][j] + &quot; &quot;); } } } } Position.main(null); . (0,2) (1,1) (1,3) (0,3) (1,2) (2,2) null (1,0) (2,3) (0,0) (0,2) (2,0) (2,1) . 2016 CSA FRQ . public class Crossword { private Square[][] puzzle; public class Square { private boolean isBlackCell; private int number; public Square(boolean isBlack, int num){ isBlackCell = isBlack; number = num; } public int getNumber() { return number; } public String toString() { String result = &quot;&quot;; if (isBlackCell) { result = &quot;B&quot;; } else { result = String.valueOf(number); } return result; } } public Crossword(boolean[][] blackSquares) { puzzle = new Square[blackSquares.length][blackSquares[0].length]; int num = 1; for (int i = 0; i &lt; blackSquares.length; i++) { for (int j = 0; j &lt; blackSquares[0].length; j++) { if (blackSquares[i][j]) { puzzle[i][j] = new Square(true, 0); } else { if (toBeLabeled(i, j, blackSquares)) { puzzle[i][j] = new Square(false, num); num++; } else { puzzle[i][j] = new Square(false, 0); } } } } } public boolean toBeLabeled(int r, int c, boolean[][] blackSquares) { if (blackSquares[r][c]) { return false; } if (r == 0 || c == 0) { return true; } if (blackSquares[r-1][c]) { return true; } if (blackSquares[r][c-1]) { return true; } else { return false; } } public static void main(String[] args) { boolean[][] cells = { {true, false, false, true}, {false, false, false, false}, {false, false, false, false},}; Crossword game = new Crossword(cells); System.out.println(&quot;Part (a):&quot;); boolean result = game.toBeLabeled(0, 3, cells); System.out.println(&quot;Positive number at row=0, col=8? Should be true: &quot; + result); System.out.println(); System.out.println(&quot;Part (b):&quot;); System.out.println(&quot;Puzzle initialized from the Crossword constructor:&quot;); System.out.println(game); } } Crossword.main(null); . Part (a): Positive number at row=0, col=8? Should be true: false Part (b): Puzzle initialized from the Crossword constructor: REPL.$JShell$52W$Crossword@6550a17c . public class HighSum { public static int highestSum(int[][] arr) { int maxSum = -1; // initialize with -1, since all sums are non-negative int rowSum = 0; int colSum = 0; for (int i = 0; i &lt; arr.length; i++) { rowSum = 0; colSum = 0; for (int j = 0; j &lt; arr[i].length; j++) { rowSum += arr[i][j]; colSum += arr[j][i]; } if (rowSum &gt; maxSum) { maxSum = rowSum; } if (colSum &gt; maxSum) { maxSum = colSum; } } return maxSum; } public static void main(String[] args) { int[][] arr = { {12,5,19}, {2,26,11}, {34,8,16} }; System.out.print(highestSum(arr)); } } HighSum.main(null); . 58 .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/04/25/frq-monkeys.html",
            "relUrl": "/jupyter/2023/04/25/frq-monkeys.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Pop Quiz",
            "content": "public class Book { protected String title; // The title of the book public static int count = 0; // total number of Book objects created public static double time; // The start time of the Book object in nanoseconds // Constructor for the Book class public Book(String title) { this.title = title; // Set the title of the book this.time = System.nanoTime(); // Set the time when the book is created count ++; // Number of books goes up each time a new book is added } // Getter for String representation of the Book object public String toString() { return &quot;Title of Book: &quot; + title; // Return the title of the book } // getter for the current count of Book objects public int getBookCount() { return count; // Return the count of Book objects } // Method to get the elapsed time since the creation of the Book object public double shelfLife() { return (System.nanoTime() - time); // Calculates the time since creation } public boolean expired() { return (this.shelfLife() &gt; 5 * 100000000); // Check if the elapsed time is greater than 5 seconds } // Tester Method public static void main(String[] args) { // Create an array with two Books Book[] books1 = { new Book(&quot;Starships&quot;), new Book(&quot;Asteroids&quot;), }; // Print the title and id of each Book for (Book i : books1) { System.out.println(i); // Print the title of the book System.out.println(&quot;ID: &quot; + i.hashCode()); // Print the id of the object System.out.println(&quot;Shelf Life: &quot; + i.shelfLife()); } System.out.println(); System.out.println(&quot;Book Count: &quot; + Book.count); // Print the total count of Book objects } } Book.main(null); . Title of Book: Starships ID: 936660526 Shelf Life: 1.24863E7 Title of Book: Asteroids ID: 1986007173 Shelf Life: 1.9943E7 Book Count: 2 . class Novel extends Book { // extends to the parent class private String author; private int checkouts; public Novel (String title, String author) { super(title); // grabs the title from the Book class this.author = author; // sets the author of the class this.checkouts = 0; // sets the number of checkouts to 0 } // Method that gets the author public String getAuthor() { return this.author; } // setter for the author public void setAuthor(String author) { this.author = author; } // setter for the time after the checkout public void checkout() { checkouts ++; this.time = System.nanoTime(); } // getter for the number of checkouts public int getCheckouts() { return this.checkouts; } // Tester class public static void main(String[] args){ // creates an array for the novels Novel[] novels = { new Novel(&quot;The Awakening&quot;, &quot;Steven Robbers&quot;), new Novel(&quot;Green Leaves&quot;, &quot;Tyler Boulder&quot;), }; for (Novel i : novels) { // iterates throughout the novels in the array System.out.println(i); System.out.println(&quot;ID: &quot; + i.hashCode()); System.out.println(&quot;Shelf Life: &quot; + i.shelfLife()); // prints the time on the shelf } } } Novel.main(null); . Title of Book: The Awakening ID: 751854226 Shelf Life: 6568100.0 Title of Book: Green Leaves ID: 367749621 Shelf Life: 9560200.0 . public class Textbook extends Book { // extends fromt the Book class private String company; // creates string for the publishing company Textbook(String title, String company) { super(title); // extends to the title from the Book class this.company = company; } // getter for the company public String getCompany() { return this.company; } // setter for the company public void setCompany(String Company) { this.company = company; } // Tester method public static void main(String[] args){ // creates array for textbooks Textbook[] textbooks1 = { // adds to the array new Textbook(&quot;Calculus AB&quot;, &quot;Bernabeo Maths&quot;), new Textbook(&quot;Calculus BC&quot;, &quot;Krenz Addition Co.&quot;), }; for (Textbook i : textbooks1) { // iterates through array System.out.println(i); System.out.println(&quot;ID: &quot; + i.hashCode()); System.out.println(&quot;Shelf Life: &quot; + i.shelfLife()); } } } Textbook.main(null); . Title of Book: Calculus AB ID: 843829239 Shelf Life: 6660100.0 Title of Book: Calculus BC ID: 1015818190 Shelf Life: 1.66538E7 .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/04/20/pop_quiz.html",
            "relUrl": "/jupyter/2023/04/20/pop_quiz.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Extra Credit CSUSM",
            "content": "Extra Credit CSUSM Blog . Ashley&#39;s Background . Works in Applied Physics | Got a D in AP Physics as a High School student but still continued to work because she had a passion for it | Grew up in Palm Springs so wanted to get away from parents | First person to go to college in family | Failed in many courses she took throughout college but still continued to persist | Learned lesson that what your grade is for a certain class doesn&#39;t mattter if you&#39;re working hard and learning something from it | . John&#39;s Background . Was a bit of a delinquent in high school | When to palomar college after graduating from high school | Saved a lot of money than going to a 4-year college | Transferred to CSUSM | Majored in Computer Science | Got a bachelor&#39;s along with two associate&#39;s degrees | Did not spend too much time on campus as a student but saw a lot more once he started working there | . CSUSM . Started as a poultry farm | potentially more science buildings are being made | Has lots of different internships in many fields | Companies in the area are willing to hire young students | Different majors include: Applied Physics | Electronics | Biological Sciences | Many resources in the Computer Science field | Cyber Security | . | CSUSM is a smaller campus so changing curriculum is easy | Computer Science is all very connected to very easy to switch throughout STEM because classes are in sync | Many math focused fields | Electtrical and software engineering is popular | Clubs: Cybersecurity | robotics | 3D Printing | Women in STEM | SWE | Society of Physics Students | . | . Internship Aid . Can range in length from 4 weeks to 4 years | Can be obtained by: going to campus events | networking | joining clubs | checking emails | . | Make sure to go for paid internships because there are many | Ask the workers for help if you feel you need some | . How to Pay for College . Grant is getting money from the government to pay for your educations | Scholarships are where the colleges privately give you money | You have to go out and get the scholarships | Scholarships can be obtained for a variety of reasons | Grants are based off of economic status | Subsidized loans are where it is partially paid off by the government | Unsubsidized loans collect interest over time | . After College . John got an internship at the safari park | Some colleges will pay for your masters degree | They will pay for all of your PhD schooling | . Overall Reflection . After going to this meeting, I learned that what grade you get in a class does not matter as long as you have a passion for a subject. I have experience of failing in certain classes and giving up in that subject because I feel like I&#39;m not good enough. However, because of this I have learned that I just have to keep on working hard and stay persistent. I also learned that computer science is very important in all fields of STEM so it is good that I am taking a computer science class. I plan on going in the STEM field in the future so it helpful that I am learning these things now to prepare me for my future. Ashley and John also taught me that there are many pathways to success so I shouldn&#39;t worry about what others are doing as long as I am doing the best in my own life. This presentation overall made me excited for college because it shows me the many opportunities that there are and all the things that I can learn. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/03/28/extra-credit.html",
            "relUrl": "/jupyter/2023/03/28/extra-credit.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Generic Types",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Rate extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Rate.key = key; } public enum KeyType implements KeyTypes {title, uid, year, type, rating} // Instance data private final String uid; // user / person id private final String year; private final String type; private final int rating; /* constructor * */ public Rate(String uid, String year, String type, int rating) { super.setType(&quot;Rate&quot;); this.uid = uid; this.year = year; this.type = type; this.rating = rating; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Rate.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.uid.equals(this.getKey())) { output += this.uid; } else if (KeyType.year.equals(this.getKey())) { output += this.year; } else if (KeyType.type.equals(this.getKey())) { output += this.type; } else if (KeyType.rating.equals(this.getKey())) { output += this.rating; } else { output += super.getType() + &quot;: &quot; + this.uid + &quot;, &quot; + this.year + &quot;, &quot; + this.type + &quot;, &quot; + this.rating; } return output; } // Test data initializer public static Rate[] Ratings() { return new Rate[]{ new Rate(&quot;9&quot;, &quot;2021&quot;, &quot;Array List&quot;, 9), new Rate(&quot;12&quot;, &quot;2022&quot;, &quot;Methods and Control Structures&quot;, 8), new Rate(&quot;3&quot;, &quot;2018&quot;, &quot;Classes&quot;, 4), new Rate(&quot;7&quot;, &quot;2014&quot;, &quot;2D Arrays&quot;, 6) }; } /* main to test User class * */ public static void main(String[] args) { // Inheritance Hierarchy Rate[] objs = Ratings(); // print with title Rate.setOrder(KeyType.title); Rate.print(objs); // print name only Rate.setOrder(KeyType.type); Rate.print(objs); } } Rate.main(null); . class [LREPL.$JShell$20$Rate; 4 Generic: Rate listed by title Rate: 9, 2021, Array List, 9 Rate: 12, 2022, Methods and Control Structures, 8 Rate: 3, 2018, Classes, 4 Rate: 7, 2014, 2D Arrays, 6 class [LREPL.$JShell$20$Rate; 4 Generic: Rate listed by type Array List Methods and Control Structures Classes 2D Arrays . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;Words count: &quot; + count + &quot;, data: &quot; + str; } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Rate.setOrder(Rate.KeyType.year); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Rate.Ratings()); qGenerics.printQueue(); qGenerics.queue.add(new Rate(&quot;18&quot;, &quot;2005&quot;, &quot;Methods and Control Structures&quot;, 5)); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); } } QueueTester.main(null); . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . Challenge #1 . import java.util.*; /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester1 { public static void main(String[] args) { // Create iterable Queue of Words String[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; Queue&lt;String&gt; queue = new Queue&lt;&gt;(); // Enqueuing all words for (String word: words){ queue.add(word); System.out.println(&quot;Enqueued data: &quot;+ word); System.out.println(queue); } // Dequeuing all words while (!(queue.isEmpty())){ String del = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + del); System.out.println(queue); } } } QueueTester1.main(null); . Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued data: sallying Words count: 3, data: slowly slithered southward Dequeued data: slowly Words count: 2, data: slithered southward Dequeued data: slithered Words count: 1, data: southward Dequeued data: southward Words count: 0, data: . Challenge #2 . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester2{ public static void main(String[] args) { // initializing two queues of ints int[] set1 = {1, 4, 5, 8}; int[] set2 = {2, 3, 6, 7}; Queue&lt;Integer&gt; Q1 = new Queue&lt;&gt;(); for (int n: set1){ Q1.add(n); } Queue&lt;Integer&gt; Q2 = new Queue&lt;&gt;(); for (int n: set2){ Q2.add(n); } // printing queues individually System.out.println(&quot;1st Queue&quot;); System.out.println(Q1); System.out.println(&quot;2nd Queue&quot;); System.out.println(Q2); //initializing new queue for queues to order into one another Queue&lt;Integer&gt; Q3 = new Queue&lt;&gt;(); while (!(Q1.isEmpty()) || !(Q2.isEmpty())){ // checking if first queue is empty if (Q1.isEmpty()){ Q3.add(Q2.delete()); } //checking if second queue is empty else if(Q2.isEmpty()){ Q3.add(Q1.delete()); } // checking if the first Q1 val is greater than the first Q2 val else if (Q1.peek() &lt; Q2.peek()){ Q3.add(Q1.delete()); } else { Q3.add(Q2.delete()); } } // printing new queue System.out.println(&quot;New Queue&quot;); System.out.println(Q3); } } QueueTester2.main(null); . 1st Queue Words count: 4, data: 1 4 5 8 2nd Queue Words count: 4, data: 2 3 6 7 New Queue Words count: 8, data: 1 2 3 4 5 6 7 8 . Challenge #3 . class ShuffleQ&lt;T&gt; { public void shuffle(Queue&lt;T&gt; q) { //initializing a new queue List&lt;T&gt; newQ = new ArrayList&lt;&gt;(); // Add all elements to newQ while (!q.isEmpty()) { newQ.add(q.delete()); } // Add elements back to q in random order while (!newQ.isEmpty()) { // Get random index int rand = (int) (Math.random() * newQ.size()); q.add(newQ.get(rand)); // Remove element from the new queue newQ.remove(rand); } } } /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester3 { public static void main(String[] args) { // Create first queue int[] set = {1, 2, 3, 4, 5, 6, 7, 8}; Queue&lt;Integer&gt; Q = new Queue&lt;&gt;(); for (int n : set) { Q.add(n); } System.out.println(&quot;Sorted Queue: &quot;); System.out.println(Q); System.out.println(); // Shuffle queue using shuffleQ ShuffleQ&lt;Integer&gt; shuffleQ = new ShuffleQ&lt;&gt;(); shuffleQ.shuffle(Q); System.out.println(&quot;Shuffled Queue: &quot;); System.out.println(Q); } } QueueTester3.main(null); . Sorted Queue: Words count: 8, data: 1 2 3 4 5 6 7 8 Shuffled Queue: Words count: 8, data: 4 6 1 5 7 2 8 3 . Challenge #4 . class Stack&lt;T&gt;{ LinkedList&lt;T&gt; top = null; public Stack(){ } public void push(T data){ top = new LinkedList&lt;T&gt;(data, top); } public T pop(){ T val = top.getData(); top = top.getPrevious(); return val; } public T peek(){ return top.getData(); } public String toString(){ LinkedList&lt;T&gt; current = top; String result = &quot;(Head) -&gt; &quot;; if (current == null){ result += &quot;Null + -&gt;&quot;; } while(current !=null){ result += current.getData() + &quot; -&gt; &quot;; current = current.getPrevious(); } result += &quot;nil&quot;; return result; } } . class QueueTester4 { public static void main(String[] args) { Stack stack = new Stack(); // Create first q int[] set = {1, 2, 3, 4, 5, 6, 7, 8}; for (int n: set){ System.out.print(n + &quot; -&gt; &quot;); } System.out.println(); for (int n: set){ stack.push(n); } System.out.println(&quot;Stack: &quot;); System.out.println(stack); } } QueueTester4.main(null); . 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; Stack: [1, 2, 3, 4, 5, 6, 7, 8] .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/03/27/generic-types.html",
            "relUrl": "/jupyter/2023/03/27/generic-types.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "AP CSA FRQ 1 2021",
            "content": "FRQ Question 1 . The FRQ AP CSA 2021 Exam had question 1 asking to create a word guessing game. This involves making the WordMatch class with a secret string. Our job was to create two methods in said class to finish the entire code amount of frq in 2021. . Question 1 part a . The first method we have to create is scoreGuess. This will show what score is returned by seeing the number of times the guess is part of the secret substring. It is then multiplied by the square of the length of the guess. . public int scoreGuess(String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) count++; } return count * (guess.length() * guess.length()); } . Question 1 part b . The second method that needs to be created is the findBetterGuess method which will return the better guess between two guesses that are inputted into the method. The guess that has a higher score will be returned. . public String findBetterGuess(String guess1, String guess2) { int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); if(score1 &gt; score2) return guess1; else if(score2 &gt; score1) return guess2; else { if(guess1.compareTo(guess2) &gt; 0) return guess1; else return guess2; } } . This is the final result of the code as an entire whole. . public class WordMatch { private String secret; public int scoreGuess (String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) count++; } return count * (guess.length() * guess.length()); } } public String findBetterGuess(String guess1, String guess2) { int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); if(score1 &gt; score2) return guess1; else if(score2 &gt; score1) return guess2; else if(guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/03/09/hacks-data-types.html",
            "relUrl": "/jupyter/2023/03/09/hacks-data-types.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Tech Talk Binary Addition",
            "content": "import java.util.Scanner; public class BinaryAddition { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); // Read the first binary number from the user System.out.print(&quot;Enter the first binary number: &quot;); System.out.println(a); String binaryString1 = scanner.nextLine(); // Read the second binary number from the user System.out.print(&quot;Enter the second binary number: &quot;); System.out.println(a); String binaryString2 = scanner.nextLine(); // Convert the binary numbers to integers int a = Integer.parseInt(binaryString1, 2); int b = Integer.parseInt(binaryString2, 2); // Add the binary numbers and convert the result to binary int sum = a + b; String binaryResult = Integer.toBinaryString(sum); // Display the binary result System.out.println(&quot;The sum of &quot; + binaryString1 + &quot; and &quot; + binaryString2 + &quot; is &quot; + binaryResult + &quot; in binary.&quot;); } } BinaryAddition.main(null); . Enter the first binary number: 1 Enter the second binary number: 1 The sum of 1 and 1 is 10 in binary. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2023/03/06/data-types.html",
            "relUrl": "/jupyter/2023/03/06/data-types.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 9 Inheritance",
            "content": "Inheritance . Capability of a class to retrieve properties and characteristics from another class . first you create a superclass which is then extended by subclasses | . public class cars { int a; } public class sub extends cars { } . Writing constructors . allows reuse of code and able to add attributes | a subclass can be further extended and turn into a super class | constructor can be used to call super class constructor and add attributes | . Overriding . &lt;mark&gt;@Override&lt;/mark&gt; gives different implementations to method of superclass | . public String toString() { return + &quot; was born &quot; + birthdayl } @Override public String toString() { return super.getName() + &quot; is in grade&quot; + grade; } . Making References . organized into single root tree called inheritance hierarchy | attributes and methods are inherited to lower levels | object and reference type can be different | . Polymorphism . used when there are multiple classes related to inheritance | used when method is implemented to perform different tasks in different classes | allows method to take multiple forms | useful for code resuability | . Homework . https://jz21324.github.io/Vcode/jupyter/2022/12/13/inheritance-hw.html .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/14/unit9-inheitance.html",
            "relUrl": "/jupyter/2022/12/14/unit9-inheitance.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 8 2D Arrays",
            "content": "Basics of 2D Arrays . Multi dimensional | 7.5-10% of the AP exam | Compared to a normal array, you have two pairs of brackets | . Creation . Make sure to put two pairs of brackets when creating a 2D Array . int[][] numbers; String[][] names; char[][] letters; float[][] floats; double[][] doubles; Object[][] objects; . Initiation . Sets values to each new array with initiation . int[][] numbers1 = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};//method 1: int[][] numbers2 = new int[4][3]; //method 2: Creates array with four rows and 3 columns String[][] names1 = {{&quot;John&quot;,&quot;James&quot;,&quot;Jay&quot;},{&quot;Melissa&quot;,&quot;May&quot;,&quot;Maggie&quot;},{&quot;Bob&quot;,&quot;Burt&quot;,&quot;Billy&quot;}}; //method 1 String[][] names2 = new String[2][2]; //method2: Creates array with 2 rows and 2 columns char[][] letters1 = {{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;},{&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;}}; //method 1 char[][] letters2 = new char[2][3]; . Iteration Example . Uses for loop print alphabet. Iterates through first array, the row, then the other loop, which is the column . String[][] alphabet = {{&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;}, {&quot;q&quot;, &quot;w&quot;, &quot;e&quot;, &quot;r&quot;, &quot;t&quot;, &quot;y&quot;, &quot;u&quot;, &quot;i&quot;, &quot;o&quot;, &quot;p&quot;, &quot;[&quot;, &quot;]&quot;, &quot; &quot;}, {&quot;a&quot;, &quot;s&quot;, &quot;d&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;}, {&quot;z&quot;, &quot;x&quot;, &quot;c&quot;, &quot;v&quot;, &quot;b&quot;, &quot;n&quot;, &quot;m&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;}}; for(int i = 0;i&lt;alphabet.length;i++){ for(int j = 0; j &lt; alphabet[i].length;j++){ //nested for loops System.out.print(alphabet[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } . 1 2 3 4 5 6 7 8 9 0 - = q w e r t y u i o p [ ] a s d f g h j k l z x c v b n m , . / . Homework . https://jz21324.github.io/Vcode/jupyter/2022/12/09/2D-arrayhw.html .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/14/unit8-2D-array.html",
            "relUrl": "/jupyter/2022/12/14/unit8-2D-array.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 7 ArraysList",
            "content": "Configurations . Arrays can be configured through . .add()&lt;/li&gt; .get()&lt;/li&gt; .set ()&lt;/li&gt; .sort()&lt;/li&gt; .clear() | &lt;/ul&gt; The .add method adds an index to the array list and the .get calls the specific index number. The .set method sets the index to a new index. The .sort method sorts the indexes in a certain order and .clear will clear all the indexes in the array. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import java.util.ArrayList; import java.util.Collections; public class Main { public static void main() { ArrayList&lt;String&gt; sports = new ArrayList&lt;String&gt;(); //Creates a new array sports.add(&quot;Football&quot;); sports.add(&quot;Basketball&quot;); //adds different sports to the array sports.add(&quot;Soccer&quot;); sports.add(&quot;Baseball&quot;); sports.add(&quot;Tennis&quot;); System.out.println(sports); // prints the array System.out.println(&quot; &quot;); for (int i = 0; i &lt; 5; i++) { System.out.println(sports.get(i)); // prints each array separately } System.out.println(&quot; &quot;); System.out.println(&quot;The size of the array is &quot; + sports.size()); //prints the size of the array sports.set(3, &quot;Golf&quot;); // changes the 3 array to &quot;Golf&quot; System.out.println(&quot;The 3 array has been changed to &quot; + sports.get(3)); System.out.println(&quot; &quot;); Collections.sort(sports); //sorts the array in alphabetical order System.out.println(&quot;The array list is in alphabetical order:&quot;); for (String i : sports) { System.out.println(i); } System.out.println(&quot; &quot;); sports.clear(); //clears the array System.out.println(&quot;The array list is now empty and says:&quot; + sports); } } Main.main(); . [Football, Basketball, Soccer, Baseball, Tennis] Football Basketball Soccer Baseball Tennis The size of the array is 5 The 3 array has been changed to Golf The array list is in alphabetical order: Basketball Football Golf Soccer Tennis The array list is now empty and says:[] . Searching . Searching is the location of data in a linear structure | involves control structures | if match then index is printed | . int sum = 0; for (String name: roster) { sum = sum + name.length(); } System.out.println(sum); . Sorting . Sorting happens by putting the ArrayList in a certain order | Collections.sort({list name}) will ascend order | Collections.sort(ArrayList, Collections.reverseOrder()) will descend order | . Homework . https://jz21324.github.io/Vcode/jupyter/2022/12/03/array-list-hw.html . &lt;/div&gt; | | | | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/14/unit7-arraylist.html",
            "relUrl": "/jupyter/2022/12/14/unit7-arraylist.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 10 Recursion",
            "content": "Intro to Recursion . 5-7.5% of the AP Exam, mainly in the multiple choice section | A recursive method is method that calls itself. | It contains at least one base case that halts recursion and once recursive call | Each recursive call has own local variables | Parameter values take progress of recursive process | A recursion can be replaced with an iterative and give the same result | Recursion can traverse String, array, and ArrayList objects | . public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . public static int simpleRecur2(int n) { if (n == 0) return 0; return n + simpleRecur2(n/2); } simpleRecur2(8); . 15 . public static void mystery (String s) { if (s.length() &gt; 1) { mystery(s.substring(2)); System.out.print(s.substring(0,1)); } } mystery(&quot;computer&quot;); . eumc . Merge Sort . Merge Sort can be used to sort ArrayLists . | Uses a Divide and Conquer algorithm to Sort ArrayList . Divides the array into halves, and then calls itself for the two different halves in order to sort them | merges the two sorted halves into one lists | . | Merging Values into One Sorted Array . copy the original elements into a temporary array | work from left to right in each virtual array to compare element and return them to the correct order in the original array | . | . Way to Think About It: mergeSort (myList) { mergeSort(left); mergeSort(right); mergeSort (left &amp; right) } . First, the mergeSort function splits the ArrayList into half, and then takes the left side of the list. It then calls mergeSort again and then halves the list, and does this two more times. Eventually, it is left with just 5 after sorting using all of mergeSort(left). . . Then, it goes back to the third step with just the 5 and 25, and looks at the right side of that one section. It compares the two halves, 5 and 25, and then sorts it, keeping the 5 before the 25 and recurses its way back to the ArrayList in the beginning. . . We then go back down one more half where we have the 5, 25, 8, and -9. Because we had already sorted the left side of that list, we then go to the right side with the 8 and -9. We then sort the left side where we get 8 and then the right side with -9. . . After this, the mergeSort() sorts -9 and 8 into the right order, and then recurses it once again 8 and -9 with the sorted -9 and 8 instead. . . Because the four of the numbers for the left side of the original list were not in the correct order overall, mergeSort is once again called and the list is sorted with the correct order for just the left side, now containing -9, 5, 8, 25. . . This process is then repeated, but for the right half of the ArrayList. It keeps slitting the list in half, sorting it, and then bringing it to the level below, where eventually, the ArrayList is sorted and merged together, as shown in the image below. . . This is a code segment that CollegeBoard had provided in order to see the recursion behind mergeSort(). The code calls mergeSort() on itself in order to sort the list and merge the halves until you reach the right order and final list. . . Recursion Trees . Recursion trees are a method for visualizing each recursive case (everytime the method is called) until the base case is reached. . Recursive blocks call themselves. In order for them to finish, there must be some special case in which they don&#39;t call themselves. That is the base case, a simpler version of the block&#39;s script that doesn&#39;t call the block itself. . There is usually a conditional with two cases: a base case for the lowest level that stops the recursion from going on forever and a recursive case that calls the block itself at lower levels until it reaches the base case. . Note: If a block keeps recursively calling itself forever, the program is stuck in an infinite loop meaning that there isn&#39;t a base case or it is not accessible. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/14/unit10-recursion.html",
            "relUrl": "/jupyter/2022/12/14/unit10-recursion.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Computer Science Technology and Business Panal",
            "content": "Kathyleen Beveridge&#39;s Journey . Born in vietnam and moved to us in 1980 | Lived in Bay Area | Studied abroad in Spain and had a great experience | Got bachelor in finance at Santa Clara college | Went to USC later in her life to get her MBA | Started at Wells Fargo as stock broker after graduating then moved to HP | After that, moved to San Diego where she got a job at Qualcomm | Currently works at Thermo Fisher | . Kris Porter . Software engineer, SRE, and DevOps engineer | Went to Livermore HS | Graduated to ucla for Electrical Engineering | Failed first computer science class but still ended up being his career | Studied radar systems and networked sensors | Worked at various different jobs that weren&#39;t hugely technological | Got a job at a startup for email marketing operation | Worked at nbc for olympic streaming media infrastructure | Moved to San Diego and forced Mr. Mort to give him a job at Qualcomm for 6 years | Started working at Twitter | Got fired after Elon buy-out | Maintained continuous learning throughout whole journey | The projects that he worked on was Streaming media infrastructure, Analytics Infrastructure projects, Twitter projects, and New DataCenter deployment | . Learnings from Speakers and Takeaways . Throughout all of Mrs. Beveridge&#39;s jobs, the companies all had a similar mission statement of trying to help the world by use of technology. Most tech companies&#39; main goal is to create new innovations that encourage helping people and progressing the world. There will be many challenges in this industry and it is important to be willing to adapt to any obstacles or circumstances. On hard thing that Mr. Porter faced was during the interview process. He was given a problem that needed to be solved with code and only given a limited amount of time to complete it. This has taught me that I need to be able to be quick on my feet and face any problem as well as I can. Another interesting thing I learned was that some tech companies will have training schools that you need to go through once you get a job. This is because the technology they use is specific to that company and cannot be learned from anywhere else. This panal definitely helped me learned a first hand example what the tech industry is like. It also showed me what some future jobs may entail that I am interested in. I am very thankful that they came and broadened my perspective of what my future can be. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/13/tech-business-panal.html",
            "relUrl": "/jupyter/2022/12/13/tech-business-panal.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 9 Inheritance Homework",
            "content": "Score: 0.9/1.0 . World Cup Superclass . public class WorldCup { public String team1; public String team2; public String team3; public String team4; public String team5; public String color; public WorldCup (String team1, String team2, String team3, String team4, String team5, String color) { this.team1 = team1; this.team2 = team2; this.team3 = team3; this.team4 = team4; this.team5 = team5; this.color = color; } public String getTeam1() { return team1; } public String getTeam2() { return team2; } public String getTeam3() { return team3; } public String getTeam4() { return team4; } public String getTeam5() { return team5; } public void main(String[] args) { System.out.println(&quot;Team 1: &quot; + this.team1); System.out.println(&quot;Team 2: &quot; + this.team2); System.out.println(&quot;Team 3: &quot; + this.team3); System.out.println(&quot;Team 4: &quot; + this.team4); System.out.println(&quot;Team 5: &quot; + this.team5); System.out.println(&quot;Team Colors: &quot; + this.color); } } public class Argentina extends WorldCup { public Argentina(String team1, String team2, String team3, String team4, String team5, String color) { super(team1, team2, team3, team4, team5, color); } } public class Portugal extends WorldCup { public Portugal(String team1, String team2, String team3, String team4, String team5, String color) { super(team1, team2, team3, team4, team5, color); } } public class Morocco extends WorldCup { public Morocco(String team1, String team2, String team3, String team4, String team5, String color) { super(team1, team2, team3, team4, team5, color); } } public class Croatia extends WorldCup { public Croatia(String team1, String team2, String team3, String team4, String team5, String color) { super(team1, team2, team3, team4, team5, color); } } public class Brazil extends WorldCup { public Brazil(String team1, String team2, String team3, String team4, String team5, String color) { super(team1, team2, team3, team4, team5, color); } } Argentina arg = new Argentina(&quot;Argentina&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Blue and White&quot;); Portugal por = new Portugal(&quot;Portugal&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Green and Red&quot;); Morocco mor = new Morocco(&quot;Morocco&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Green and Red&quot;); Croatia cro = new Croatia(&quot;Croatia&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Red and White&quot;); Brazil brz = new Brazil(&quot;Brazil&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Null&quot;, &quot;Green and Yellow&quot;); arg.main(null); por.main(null); mor.main(null); cro.main(null); brz.main(null); . Team 1: Argentina Team 2: Null Team 3: Null Team 4: Null Team 5: Null Team Colors: Blue and White Team 1: Portugal Team 2: Null Team 3: Null Team 4: Null Team 5: Null Team Colors: Green and Red Team 1: Morocco Team 2: Null Team 3: Null Team 4: Null Team 5: Null Team Colors: Green and Red Team 1: Croatia Team 2: Null Team 3: Null Team 4: Null Team 5: Null Team Colors: Red and White Team 1: Brazil Team 2: Null Team 3: Null Team 4: Null Team 5: Null Team Colors: Green and Yellow . Inheritance (To Do) . public class Person { protected String name; protected String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge() { return 2022 - Integer.parseInt(birthday); } @Override public String toString() { return &quot;Person (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;)&quot;; } } public class Student extends Person { private int grade; private double gpa; public Student (String name, String birthday, int grade, double gpa) { super(name, birthday); this.grade = grade; this.gpa = gpa; } // return gpa public double getGPA() { return gpa; } // return grade public int getGrade(){ return grade; } @Override public String toString() { return &quot;Student (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, gpa: &quot; + gpa + &quot;, grade: &quot; + grade + &quot;)&quot;; } } public class Teacher extends Person { private String subject; private String degree; public Teacher (String name, String birthday, String subject, String degree) { super(name, birthday); this.subject = subject; this.degree = degree; } // return subject public String getSubject() { return subject; } // return yearsOfExperience // return degree public String getDegree() { return degree; } @Override public String toString() { return &quot;Teacher (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, subject: &quot; + subject + &quot;, degree: &quot; + degree + &quot;)&quot;; } } Person steve = new Person(&quot;Steve&quot;, &quot;1990&quot;); System.out.println(steve.toString()); Person jazair = new Student(&quot;Jazair&quot;, &quot;2005&quot;, 11, 4.0); System.out.println(jazair.toString()); Person george = new Teacher(&quot;George&quot;, &quot;1980&quot;, &quot;math&quot;, &quot;Data Science&quot;); System.out.println(george.toString()); . Person (name: Steve, birthday: 1990) Student (name: Jazair, birthday: 2005, gpa: 4.0, grade: 11) Teacher (name: George, birthday: 1980, subject: math, degree: Data Science) .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/13/inheritance-hw.html",
            "relUrl": "/jupyter/2022/12/13/inheritance-hw.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 10 Recursion",
            "content": "Intro to Recursion . 5-7.5% of the AP Exam, mainly in the multiple choice section | A recursive method is method that calls itself. | It contains at least one base case that halts recursion and once recursive call | Each recursive call has own local variables | Parameter values take progress of recursive process | A recursion can be replaced with an iterative and give the same result | Recursion can traverse String, array, and ArrayList objects | . This is what a recursion looks like where the example method is called within itself. . public static void example(int n) { if (n &gt; 0) example (n-1); } . In this example, the simplerRecur method is called within itself. So, simplerRecur(4) will result in printing 4 and then one less than it until the parameter is false. It then cycles back up to the top of the call stack. This is why it returns the 2 3 4 at the end. . public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . In this, simpleRecur2(8) wil return 8 + simpleRecur2(4) and simpleRecur2(4) will return 4 + simpleRecur2(2). This process will continue until n = 0 and all the values will be added together. . 8 + 4 + 2 + 1 + 0 . public static int simpleRecur2(int n) { if (n == 0) return 0; return n + simpleRecur2(n/2); } simpleRecur2(8); . 15 . This one is similar to the last example where it will add the values together but this has multiple recursive methods inside it. So, dblRecur(5) will return 5 + dblRecur(2) + dblRecur(1) and then dblRecur(2) and dblRecur(1) will have their own run through the method until n is no longer greater than 0. . public int dblRecur(int n) { if (n &gt; 0) return n + dblRecur(n/2) + dblRecur(n/3); return 0; } dblRecur(5); . 9 . Recursion can also be seen will String objects. In this, mystery(&quot;computer&quot;) will first go through the mystery(s.substring(2)) which will result in a call stack with &quot;computer&quot;, &quot;mputer&quot;, &quot;uter&quot;, &quot;er&quot;, and &quot; &quot;. THe print statement will then print the first letter of those Strings so e u m c. . public static void mystery (String s) { if (s.length() &gt; 1) { mystery(s.substring(2)); System.out.print(s.substring(0,1)); } } mystery(&quot;computer&quot;); . eumc . 10.2 Binary Search With Equations . We start by taking the entire array, starting with the first and the last numbers, and find the midpoint. Starting number is 0, and end is 40, and the midpoint is 20. . . Since 24 is greater than 20, we take the upper bound of the list, ignoring everything less that 22.The first number now becomes 22. . . We identify the midpoint again, which is 30. Since the new midpoint is higher than 24, we now take the lower bound. Here, the last number becomes 28. . . In this new bound, we find the midpoint again, which happens to be 24. So, we have found our target. . Now, lets say that the target was 23, instead of 24. The program would have to keep going from the midpoint of 24. Since 23 is less than 24, it takes the lower bound. However, this makes first, last and midpoint numbers 22. . . Again, since 22 is less than 23, the first number becomes 24, and the last number stays 22. This becomes a problem since the first number is greater than the last, which is our base case. This tells the program that the number 23 isn’t in the list, and that it should end. . . public class recursion{ public static int recursionBinarySearch(int[] array, int first, int last, int target){ int midpoint; //if the first number is greater than the last, the target number is not in the list if (first &gt; last){ System.out.println(-1); return -1; } else{ midpoint = (first+last)/2; //take the upper bound if number is greater than midpoint if (array[midpoint] &lt; target){ return recursionBinarySearch(array, midpoint+1, last, target); } // take the lower bound if the number is lesser than midpoint if (array[midpoint] &gt; target){ return recursionBinarySearch(array, first,midpoint-1, target); } System.out.println(&quot;index of target: &quot; + midpoint); return midpoint; } } public static void main(String[] args){ // test array in main int[] test_array = new int[]{ 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 }; recursion.recursionBinarySearch(test_array, 0, test_array.length, 24); } } recursion.main(null); . index of target: 12 . Merge Sort . Merge Sort can be used to sort ArrayLists . | Uses a Divide and Conquer algorithm to Sort ArrayList . Divides the array into halves, and then calls itself for the two different halves in order to sort them | merges the two sorted halves into one lists | . | Merging Values into One Sorted Array . copy the original elements into a temporary array | work from left to right in each virtual array to compare element and return them to the correct order in the original array | . | . Way to Think About It: mergeSort (myList) { mergeSort(left); mergeSort(right); mergeSort (left &amp; right) } . First, the mergeSort function splits the ArrayList into half, and then takes the left side of the list. It then calls mergeSort again and then halves the list, and does this two more times. Eventually, it is left with just 5 after sorting using all of mergeSort(left). . . Then, it goes back to the third step with just the 5 and 25, and looks at the right side of that one section. It compares the two halves, 5 and 25, and then sorts it, keeping the 5 before the 25 and recurses its way back to the ArrayList in the beginning. . . We then go back down one more half where we have the 5, 25, 8, and -9. Because we had already sorted the left side of that list, we then go to the right side with the 8 and -9. We then sort the left side where we get 8 and then the right side with -9. . . After this, the mergeSort() sorts -9 and 8 into the right order, and then recurses it once again 8 and -9 with the sorted -9 and 8 instead. . . Because the four of the numbers for the left side of the original list were not in the correct order overall, mergeSort is once again called and the list is sorted with the correct order for just the left side, now containing -9, 5, 8, 25. . . This process is then repeated, but for the right half of the ArrayList. It keeps slitting the list in half, sorting it, and then bringing it to the level below, where eventually, the ArrayList is sorted and merged together, as shown in the image below. . . This is a code segment that CollegeBoard had provided in order to see the recursion behind mergeSort(). The code calls mergeSort() on itself in order to sort the list and merge the halves until you reach the right order and final list. . . Recursion Trees . Recursion trees are a method for visualizing each recursive case (everytime the method is called) until the base case is reached. . Recursive blocks call themselves. In order for them to finish, there must be some special case in which they don&#39;t call themselves. That is the base case, a simpler version of the block&#39;s script that doesn&#39;t call the block itself. . There is usually a conditional with two cases: a base case for the lowest level that stops the recursion from going on forever and a recursive case that calls the block itself at lower levels until it reaches the base case. . Note: If a block keeps recursively calling itself forever, the program is stuck in an infinite loop meaning that there isn&#39;t a base case or it is not accessible. . Example of Recursion Tree . Q: What is the value returned by foo(3)? . A: Use a recursion tree! . . Since the base case of foo returns 1, we can just add up all the function calls that return the base case. . public class example{ static int foo(int n) { if (n &lt; 0){ return 1; } else{ return foo(n-2) + foo(n-1); } } public static void main(String args[]){ System.out.println(foo(3)); } } example.main(null); . 8 . Class Activity . If you are on the left side of the class, you will be working with the factorial code. If you are on the right side of the class, you will be working with the fibonacci code. The objective is to work with your crossover team to act out the recursion tree for the code segments below. The first team from each side to show up the correct recursion tree will receive candy! . TASK: You and your crossover team must physically act out the recursion tree, meaning standing up and each taking a sticky note to represent each branch of the tree. . If you are on the Fibonacci side: You will be acting out fib(3) . If you are on the Factorial side: You will be acting out fact(4) . Fibonacci Code . // Fibonacci Series using Recursion class fibonacci { static int fib(int n) { // Handling base case // iIf value of n=1 or n=0, it returns 1 if (n &lt;= 1) return n; // Generic case // Otherwise we do n-1 + n-2! return fib(n - 1) + fib(n - 2); } public static void main(String args[]) { // Calling method 1 to compute fibonacci and // storing the result into a variable int n = 3; // Print and display the fibonacci of number // customly passed as an argument System.out.println(&quot;3rd Fibonacci Sequence is: &quot; + fib(n)); } } fibonacci.main(null); . 3rd Fibonacci Sequence is: 2 . Factorial Code . class factorial { static int fact(int n) { // Handling base case // iIf value of n=1 or n=0, it returns 1 if (n == 0 || n == 1) return 1; // Generic case // Otherwise we do n*(n-1)! return n * fact(n - 1); } // Method 2 // main driver method public static void main(String[] args) { // Calling method 1 to compute factorial and // storing the result into a variable int n = 4; // Print and display the factorial of number // customly passed as an argument System.out.println(&quot;Factorial of 4 is: &quot; + fact(n)); } } factorial.main(null); . Factorial of 4 is: 24 . Homework (MC) . https://docs.google.com/forms/d/e/1FAIpQLSdqAPDDeRqH4wU8soSGx5v-0Iy9kX8h4vnxXMeq5_ErUF5skw/viewform?usp=sf_link . Homework Scores . https://docs.google.com/spreadsheets/d/1ucOgxEYKWkggvw7SJ3TuuPXu0ElscD8unKX-RNxB3No/edit?usp=sharing .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/11/recusion-prezi-10-1.html",
            "relUrl": "/jupyter/2022/12/11/recusion-prezi-10-1.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 8 2D Arrays Homework",
            "content": "Score: 1.1/1.0 . Homework . import java.util.Scanner; public class Arrays{ int[][] numbers = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}}; public void printArray(){ System.out.println(&quot; nForwards&quot;); for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ System.out.print(numbers[i][j] + &quot; &quot;); } System.out.println(); } } public void reverseArray() { System.out.println(&quot; nReverse&quot;); for (int i = numbers.length - 1; i &gt;= 0; i--){ for(int j = numbers[i].length - 1; j &gt;= 0; j--) { System.out.print(numbers[i][j]+ &quot; &quot;); } System.out.println(); } } public void askForIndex(){ System.out.println(&quot; nAsk for Input&quot;); Scanner scanner = new Scanner(System.in); System.out.print(&quot;Row: &quot;); int rowIndex = scanner.nextInt(); System.out.println(rowIndex); System.out.print(&quot;Column: &quot;); int columnIndex = scanner.nextInt(); System.out.println(columnIndex); System.out.println(&quot;Result = &quot; + numbers[rowIndex][columnIndex]); } public void multiplyThenSum(){ System.out.println(&quot; nSum of Row Products&quot;); int a = 1; int b = 0; for (int j = 0; j &lt; numbers.length; j++) { for(int i = 0; i &lt; numbers.length; i++){ a = a*numbers[j][i]; } b = b + a; System.out.println(&quot;product of row &quot; + j + &quot; = &quot; + a); a = 1; } System.out.print(&quot;sum of rows = &quot; + b); } public static void main(String[] args){ Arrays array = new Arrays(); array.printArray(); array.reverseArray(); array.askForIndex(); array.multiplyThenSum(); } } Arrays.main(null); . Forwards 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Reverse 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 Ask for Input Row: 3 Column: 3 Result = 16 Sum of Row Products product of row 0 = 24 product of row 1 = 1680 product of row 2 = 11880 product of row 3 = 43680 sum of rows = 57264 . Extra Credit . class CarsLoop { String [][] cars; String [][] cthulhus; //hint: missing code public CarsLoop() { cars = new String[][]{ { &quot; ______ &quot;, //[0][0] eyes }, { &quot; /|_||_ `.__ &quot;, //[1][0] chin }, { &quot;( _ _ _ &quot;, //[2][0] body }, { &quot;=`-(_)--(_)-&#39; &quot; //[3][0] legs }, }; cthulhus = new String[][]{ { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _________________________&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀| | | | | | &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀|___|_____|_____|____|_|___ &quot;, &quot;⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀| | | &quot;, &quot;⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀ `--(o)(o)--(o)--&#39;&quot;, &quot;⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;A story of a Car and Cthulhus&quot;); int carsCount = cars.length; int cthulhusCount = cthulhus[0].length; for (int i = 0; i &lt; carsCount; i++) { System.out.println(cars[i][0]); } for (int j = 0; j &lt; cthulhusCount; j++) { System.out.println(cthulhus[0][j]); } System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new CarsLoop().printPoem(); } } CarsLoop.main(null); . A story of a Car and Cthulhus ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡀⠀⠀⠀⠀⠀⠀⢎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ _________________________ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢱⠀⠀⢀⣤⡀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀| | | | | | ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠻⠉⣧⣿⣿⣿⠀⠀⢸⠇⠀⠐⠉⡆⠀⠀⠀⠀⠀|___|_____|_____|____|_|___ ⠀⠀⠀⠀⢀⠔⠒⢦⠀⢻⡄⠀⢿⣻⣿⡿⢀⣴⣋⣄⣄⣌⣠⠃⠀⠀⠀⠀| | | ⠀⠀⠀⠀⠈⠀⢀⡞⠀⠈⠛⣷⣾⣿⣿⣿⣿⣿⣯⣥⣀⠀⠀⠀⠀⠀⠀⠀⠀ `--(o)(o)--(o)--&#39; ⠀⠀⠀⠀⠀⠀⠈⠷⣦⣴⡾⢿⣿⡿⢿⣿⣋⣽⠶⢦⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⢀⡆⠈⠉⠁⡄⠈⡇⠘⢇⠀⢈⡆⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡯⠀⠸⠁⠀⠀⠸⣧⡀⡇⠀⠈⠉⠉⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡴⠁⠀⠀⠀⠀⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀ 0000000000000000000000000000000000 THE END .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/09/2D-arrayhw.html",
            "relUrl": "/jupyter/2022/12/09/2D-arrayhw.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 7 Array List Homework",
            "content": "Score: 0.9/1.0 . import java.util.*; import java.lang.Math; ArrayList&lt;Integer&gt; number = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; number2 = new ArrayList&lt;Integer&gt;(); for (int i = 0; i &lt; 5; i++){ number.add(i); } for (int i = 5; i &gt; 0; i--){ number.add(i); } System.out.println(&quot;Original: &quot; +number); System.out.println(&quot;HashCode: &quot; + number.hashCode()); number.sort(Comparator.reverseOrder()); System.out.println(&quot;ArrayList after sort: &quot; + number); System.out.println(&quot;HashCode: &quot; + number.hashCode()); Collections.swap(number, 4, 0); System.out.println(&quot;Swap the first and last elements: &quot; + number); System.out.println(&quot;HashCode: &quot; + number.hashCode()); boolean a; boolean b; for (int i=0; i &lt; number.size() - 1; i++){ if (!(number.get(i) &lt;= number.get(i + 1))){ boolean a = false; } if (!(number.get(i) &gt;= number.get(i + 1))){ boolean b = false; } } if (a){ System.out.println(&quot;ascending&quot;); } if (b){ System.out.println(&quot;descending&quot;); } else{ System.out.println(&quot;neither&quot;); } . Original: [0, 1, 2, 3, 4, 5, 4, 3, 2, 1] HashCode: -1631985086 ArrayList after sort: [5, 4, 4, 3, 3, 2, 2, 1, 1, 0] HashCode: -287789284 Swap the first and last elements: [3, 4, 4, 3, 5, 2, 2, 1, 1, 0] HashCode: 162496028 neither .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/03/array-list-hw.html",
            "relUrl": "/jupyter/2022/12/03/array-list-hw.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 6 Arrays",
            "content": "Arrays . different data structures | primitive contains single data type | reference contains multiple data types | the element is the value in the array | the index is the position | . int[] array = new int[10]; int[] array2 = {1, 2, 3, 4, 5}; . Errors . accessing a value that doesn&#39;t not exist because it isn&#39;t in the bounds | when you initialize a single array but not the whole array | . Traverse in Arrays . accessing the inside of an array | a loop or iteration can traverse&lt;/mark&gt; an array&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; for (int i = 0; i &lt; array.length; i++) { System.out.println(array[i]); } . Arrays can be configured through . .add | .get | .set | .sort | .clear | . The .add method adds an index to the array list and the .get calls the specific index number. The .set method sets the index to a new index. The .sort method sorts the indexes in a certain order and .clear will clear all the indexes in the array. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main() { ArrayList&lt;String&gt; sports = new ArrayList&lt;String&gt;(); //Creates a new array sports.add(&quot;Football&quot;); sports.add(&quot;Basketball&quot;); //adds different sports to the array sports.add(&quot;Soccer&quot;); sports.add(&quot;Baseball&quot;); sports.add(&quot;Tennis&quot;); System.out.println(sports); // prints the array System.out.println(&quot; &quot;); for (int i = 0; i &lt; 5; i++) { System.out.println(sports.get(i)); // prints each array separately } System.out.println(&quot; &quot;); System.out.println(&quot;The size of the array is &quot; + sports.size()); //prints the size of the array sports.set(3, &quot;Golf&quot;); // changes the 3 array to &quot;Golf&quot; System.out.println(&quot;The 3 array has been changed to &quot; + sports.get(3)); System.out.println(&quot; &quot;); Collections.sort(sports); //sorts the array in alphabetical order System.out.println(&quot;The array list is in alphabetical order:&quot;); for (String i : sports) { System.out.println(i); } System.out.println(&quot; &quot;); sports.clear(); //clears the array System.out.println(&quot;The array list is now empty and says:&quot; + sports); } } Main.main(); . [Football, Basketball, Soccer, Baseball, Tennis] Football Basketball Soccer Baseball Tennis The size of the array is 5 The 3 array has been changed to Golf The array list is in alphabetical order: Basketball Football Golf Soccer Tennis The array list is now empty and says:[] . Homework . Homework . &lt;/div&gt; | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/01/unit6-arrays.html",
            "relUrl": "/jupyter/2022/12/01/unit6-arrays.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 5 Classes",
            "content": "Class Naming . When creating java classes, it is important to have a good name for your class. The name of the class should . have words that are relevant to the code | aren&#39;t similar to another class name where they might be confused | not single letter | . Static variables . Static variables or class variables are in a class and is only initialized once at the beginning of the execution. It belongs to the class, not the object. . Main and Tester Method . Main and tester methods are used hold a collection of code to perform certain tasks. The main will create the code and the tester will actually run the code to test the result. . A class can be extended with the extends keyword which inherits a class from a superclass. A subclass will be the one that inherits from the superclass. . Overloading and Overriding . Method overloading lets a class have more than one method with the same name, but with different parameters. Overriding occurs when the subclass has the same method as the superclass. . Abstract Class and Method . An abstract class is a class that is restricted so it can&#39;t be used to make objects. An abstract method can only be in an abstract class and doesn&#39;t have a body. . abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(&quot;Zzz&quot;); } // Animal myObj = new Animal(); will cause an error } . Homework . Homework .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/01/unit5-classes.html",
            "relUrl": "/jupyter/2022/12/01/unit5-classes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 4 Iteration",
            "content": "Loops . For loops allow a code to be repeated until a certain parameter is no longer true. There is then also nested loops where there will be a loop within a loop. And finally, a while loop will run through certain code as long as a certain condition is true. . for (int i = 0; i &lt; 5; i++) { System.out.println(i); } . 0 1 2 3 4 . // Outer loop for (int i = 1; i &lt;= 2; i++) { System.out.println(&quot;Outer: &quot; + i); // Executes 2 times // Inner loop for (int j = 1; j &lt;= 3; j++) { System.out.println(&quot; Inner: &quot; + j); // Executes 6 times (2 * 3) } } . Outer: 1 Inner: 1 Inner: 2 Inner: 3 Outer: 2 Inner: 1 Inner: 2 Inner: 3 . int i = 0; while (i &lt; 5) { System.out.println(i); i++; } . 0 1 2 3 4 . Homework . Homework .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/01/unit4-iteration.html",
            "relUrl": "/jupyter/2022/12/01/unit4-iteration.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3 If Then Statements",
            "content": "Compound Boolean Expression . &amp;&amp; will make it so both parameters need to be met so that the code runs. || is the same thing but either can be true and the code will run. . public class Example1 { public static void main(String[] args) { boolean cleanedRoom = true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework) { System.out.println(&quot;You can go out&quot;); } else { System.out.println(&quot;No, you can&#39;t go out&quot;); } } } . A Truth Table shows all the possible results of a boolean function, whether it&#39;s true or false. . De Morgan&#39;s Law: . De Morgan&#39;s Law states that the &quot;!&quot; symbol will negate an And statement and an Or statement. This means that if a condition is written as a || b, !(a || b) would really be a &amp;&amp; b. This goes for the other way around where !(a &amp;&amp; b) is a || b. It will also cause a true statement to be false with !(true) and vice versa. . boolean child = true; boolean hungry = false; if (!(child &amp;&amp; hungry)) { System.out.println(&quot;You have a hungry child&quot;); } else { System.out.println(&quot;Who knows what&#39;s going on?&quot;); } . You have a hungry child . boolean fruit = true; boolean red = true; if (!(!(fruit) || !(red))) { System.out.println(&quot;It&#39;s probably a red apple&quot;); } else { System.out.println(&quot;You have an unknown food&quot;); } . It&#39;s probably a red apple . Homework . Homework .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/01/unit3-if-then.html",
            "relUrl": "/jupyter/2022/12/01/unit3-if-then.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 2 Objects",
            "content": "Constructor . After creating an object for a class, a constructor is called and can set initial values for the object attributes. . public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } . Accesssors and Mutators . Accessor and mutator methods can be used to return the value of a private variable and change the value of the variable respectively. . public class CheckingAccount{ private int balance; //An accessor method public int getBalance(){ return this.balance; } //A mutator method public void setBalance(int newBalance){ this.balance = newBalance; } } . &quot;This&quot; . The this keyword is the current object in a method or constructor. It is used to invoke the current class, return the current class objet, or pass an argument. . public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(&quot;Value of x = &quot; + myObj.x); } }public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(&quot;Value of x = &quot; + myObj.x); } } . The toString() will represent any object as a string. . class Student{ int rollno; String name; String city; Student(int rollno, String name, String city){ this.rollno=rollno; this.name=name; this.city=city; } public static void main(String args[]){ Student s1=new Student(101,&quot;Raj&quot;,&quot;lucknow&quot;); Student s2=new Student(102,&quot;Vijay&quot;,&quot;ghaziabad&quot;); System.out.println(s1);//compiler writes here s1.toString() System.out.println(s2);//compiler writes here s2.toString() } } . Standard Methods . The equals() method will return true or false depending on whether two strings are equal. . String myStr1 = &quot;Hello&quot;; String myStr2 = &quot;Hello&quot;; String myStr3 = &quot;Another String&quot;; System.out.println(myStr1.equals(myStr2)); // Returns true because they are equal System.out.println(myStr1.equals(myStr3)); // false . true false . A late binding of an object is when the object is determined when the code is ran. . class Animal { void eat(){System.out.println(&quot;animal is eating...&quot;);} } class Dog extends Animal{ void eat() { System.out.println(&quot;dog is eating...&quot;); } public static void main(String args[]) { Animal a=new Dog(); a.eat(); } } . Polymorphism is how a class is able to provide different implementations of a method. It allows you to make the same action in different ways. . Big O notation is what the set of all the different algorithms that is able to run at a certain speed. . To combine two different strings, you can use concatenation which can combine two or more strings to create one new string. . Homework . Homework .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/01/unit2-objects-lesson-frq.html",
            "relUrl": "/jupyter/2022/12/01/unit2-objects-lesson-frq.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 1 Java Primitives",
            "content": "Java Wrappers . Booleans . true and false | one bit | . Integers . int values | 2-3 bits | . Double . decimal values | 64 bits | . Character . A single character | . boolean a = true; int b = 5; double c = 7.5; char d = &#39;a&#39;; . The Math class allows you to use different math related methods such as min, max, avg, sin, abs, etc. Namely, there is the java.lang.Math.random() method which will give a random number between 0.0 and 1.0. . double x = 28; double y = 4; double z = Math.random(); // return the maximum of two numbers System.out.println(&quot;Maximum number of x and y is: &quot; +Math.max(x, y)); // return the square root of y System.out.println(&quot;Square root of y is: &quot; + Math.sqrt(y)); //returns 28 power of 4 i.e. 28*28*28*28 System.out.println(&quot;Power of x and y is: &quot; + Math.pow(x, y)); // return the logarithm of given value System.out.println(&quot;Logarithm of x is: &quot; + Math.log(x)); System.out.println(&quot;Logarithm of y is: &quot; + Math.log(y)); // return the logarithm of given value when base is 10 System.out.println(&quot;log10 of x is: &quot; + Math.log10(x)); System.out.println(&quot;log10 of y is: &quot; + Math.log10(y)); // return the log of x + 1 System.out.println(&quot;log1p of x is: &quot; +Math.log1p(x)); // return a power of 2 System.out.println(&quot;exp of a is: &quot; +Math.exp(x)); // return (a power of 2)-1 System.out.println(&quot;expm1 of a is: &quot; +Math.expm1(x)); // returns a random number System.out.println(z); . Maximum number of x and y is: 28.0 Square root of y is: 2.0 Power of x and y is: 614656.0 Logarithm of x is: 3.332204510175204 Logarithm of y is: 1.3862943611198906 log10 of x is: 1.4471580313422192 log10 of y is: 0.6020599913279624 log1p of x is: 3.367295829986474 exp of a is: 1.446257064291475E12 expm1 of a is: 1.446257064290475E12 0.09599477421748714 . Operators . Addition (+) . Subtraction (-) . Division (/) . A casting for doubles will temporarily create a double value so that instead of having an int, it will have a double temporarily. . &ensp;&thinsp;&ensp;&thinsp;&ensp;&thinsp; Ex: 7/(double)3 will make a temporary 3.0 . A casting for integers or rounding will temporarily round a double value so that it is an integer. . &ensp;&thinsp;&ensp;&thinsp;&ensp;&thinsp; Ex: 7/(int)3.333 will make a temporary 3 . Multiplication (*) . Increment (++, --) . int a = 5 + 10; int b = 20 - 5; int c = 45 / 3; int d = 5 * 3; System.out.println(a + b + c + d); . 60 . Video Learning Notes . Primitive Data Types in Java . A byte is just 8 bits. Int is used for integer values. Floats are used for values with few decimal digits, while doubles are used for values with many decimal digits. A boolean is used for false or true values. A char will have a single character. A string will have multiple characters. . byte a = 12; int b = 5; float c = 6.3f; double d = 7.344345542; boolean e = true; char f = &#39;W&#39;; String g = &quot;Hello&quot;; . Homework . Homework .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/12/01/unit1-java-primatives-learning.html",
            "relUrl": "/jupyter/2022/12/01/unit1-java-primatives-learning.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 1 Lesson Homework",
            "content": "Score: 0.9/1.0 . Why to use Java? (1.1) . Java is an important programming language that is widely used throughout the tech industry and contains many important programmming concepts such as object oriented programming. . Basic Java (1.1) . All code that runs must be in the main method (shown below) | To print something, use System.out.print(); and inside the parenthesis put text in quotes (String) To print with a new line, use System.out.println(); | . | To comment your code, use // for single line comments and /**/ for multiple lines (example will be shown below) It is important to describe how and why your code works, however dont describe obvious things | . | . public class Example { public static void main(String[] args) { System.out.print(&quot;Hello World&quot;); System.out.print(&quot; From Team Oops!&quot;); System.out.println(); //done to separate two different lines System.out.println(&quot;Welcome to our presentation!&quot;); System.out.print(&quot;We hope you learn something from it!&quot;); } } Example.main(null); . Hello World From Team Oops! Welcome to our presentation! We hope you learn something from it! . Hack 1.1 . Print your name and your team name in separate lines! . public class Printing { public static void main(String[] args) { System.out.println(&quot;Jazair Tallman&quot;); System.out.println(&quot;JEHB&quot;); } } Printing.main(null); . Jazair Tallman JEHB . List of Data Types (1.2) . Data types are different categories in which one can store various types of data. | The main Primitve data types are: Integer (int): used for whole numbers | Double (double): used for numbers with decimals | Boolean (boolean): used for true or false conditionals | . | For Primitive types, variables store actual data instead of reference | If the variable is declared final, it cannot be edited | A non Primitive type which is commonly used is String Stores text | . | . public class Example { public static void main(String[] args) { int Herbo = 10; double gasPrices = 7.99; final boolean Hot = true; String name = &quot;Team Oops is hot:&quot;; System.out.println(Herbo); System.out.println(gasPrices); System.out.println(name + Hot); // Hot = false; cannot assign a value to final variable Hot } } Example.main(null); . 10 7.99 Team Oops is hot:true . Hack 1.2 . Create variables for your biodata (name, age, underclassmen or not, height in feet) . public class Biodata { public static void main(String[] args) { String name = &quot;Jazair Tallman&quot;; int age = 17; boolean underclassmen = false; double height = 5.75; System.out.println(&quot;My name is &quot; + name + &quot; and I am &quot; + age + &quot; years old.&quot;); System.out.println(underclassmen); System.out.println(height); } } Biodata.main(null); . My name is Jazair Tallman and I am 17 years old. false 5.75 . Operators (1.3) . In order to perform mathmatical calculations on integers and doubles, you can use operators | Main ones are +, -, *, / These are what you expect | When dividing integers, it always rounds down because output must be an integer | When dividing by 0, will get the ArithemticException Error | . | Modulus is %, used to get remainder when two numbers are divided | . public class Math { public static void main(String[] args) { int number = 2; int number2 = 5; double number3 = 2.0; double number4 = 5.0; System.out.println(number+number2); System.out.println(number3+number4); System.out.println(number-number2); System.out.println(number3-number4); System.out.println(number * number2); System.out.println(number3 * number4); System.out.println(number/number2); System.out.println(number3/number4); System.out.println(number4 % number3); System.out.println(number2 % number); } } Math.main(null); . 7 7.0 -3 -3.0 10 10.0 0 0.4 1.0 1 . Hack 1.3 . Compute the remainder of 6 multiplied by 1234124 divided by 11345 minus 890809 plus 90800 (use order of operations) is divided by 980098, and store this in a variable called num (get an exact number as opposed to a whole number) | Divide num by 100 | Print num | . public class Num { public static void main(String[] args) { int num1 = 6 * 1234124; int num2 = num1 % 11345; int num3 = num2 - 890809 + 90800; int num = num3 / 980098; System.out.println(num / 100); } } Num.main(null); . 0 . Assignment operators (1.4) . += adds value of a variabe to another variable and assigns total value to first variable | -= subtracts value of a variabe to another variable and assigns total value to first variable | *= multiplies value of a variabe to another variable and assigns total value to first variable | /= multiplies value of a variabe to another variable and assigns total value to first variable | %= takes the remainder of a variable with a second variable and assigns remainder to first variable | ++ increments a variable by 1, to incrememt by more change second plus to number which you want to incrememnt by | -- subracts a variable by 1, to incrememt by more change second plus to number which you want to subtract by | . Hack 1.4 . Create a code which performs mathmatical calculations with assignment operators! | . public class Operators { public static void main(String[] args) { for (int i = 0; i &lt; 10; i++) { System.out.println(i); } } } Operators.main(null); . 0 1 2 3 4 5 6 7 8 9 . Casting and Ranges (1.5) . Doubles and Integers can be converted to each other using (int) or (double) When converting from doubles to integers, will round down | . | Integers are 4 bytes of data, can store between Integer.MAX_VALUE and Integer.MIN_VALUE | . public class Cast { public static void main(String[] args) { double num = 10.5; int num2 = 100; int numInt = (int)num; double num2Double = (double)num2; System.out.println(num); System.out.println(num2); System.out.println(numInt); System.out.println(num2Double); System.out.println(Integer.MAX_VALUE); System.out.println(Integer.MIN_VALUE); } } Cast.main(null); . 10.5 100 10 100.0 2147483647 -2147483648 . Hack 1.5 . Convert 123456.123456 into an integer | Set 678901234567890 into an integer (what do you think will happen?) | . public class CastActivity { public static void main(String[] args) { double a = 123456.123456; int b = (int)a; System.out.println(a); System.out.println(b); } } CastActivity.main(null); . 123456.123456 123456 . Code Example! . public class Main { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;What is your name?&quot;); String name = sc.next(); //string System.out.println(name); System.out.println(&quot;How many pizzas do you want to buy?&quot;); int pizzas = sc.nextInt(); //integer System.out.println(pizzas); System.out.println(&quot;Do you have the discount (true/false)?&quot;); boolean hasDiscount = sc.nextBoolean(); //boolean System.out.println(hasDiscount); double price; //double, defaults to 0 if (hasDiscount) { price = 1.20; } else { price = 2.10; } char firstChar = name.charAt(0); //character double finalPrice = price * pizzas * 1.08; // adding taxes System.out.println(&quot;Hi &quot; + firstChar + &quot;! You have to pay &quot; + (finalPrice) + &quot; dollars.&quot;); } } Main.main(null); .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/30/primitives-hw.html",
            "relUrl": "/jupyter/2022/11/30/primitives-hw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 2 Lesson Homework",
            "content": "Score 0.95/1.0 . FRQ 2021 . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/30/objects-hw.html",
            "relUrl": "/jupyter/2022/11/30/objects-hw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 4 Lesson Homework",
            "content": "Score 0.9/1.0 . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letter = &quot;&quot;; public CaesarCipher(String message) { for (int i = 0; i &lt; message.length(); i++) { letter = message.substring(i, i + 1); if (letter.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letter.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letter.equals(letters[j])) { System.out.print(letters[(j + 3) % 26]); } if (letter.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } /*String oldLetter = message1.substring(i); System.out.println(oldLetter); int oldIndex = Arrays.asList(letters).indexOf(oldLetter); String newLetter = letters[(oldIndex + 3) % 26]; newMessage += newLetter; //System.out.println(message1.indexOf(letters[i+3])); */ } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/30/iteration-hw.html",
            "relUrl": "/jupyter/2022/11/30/iteration-hw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Lesson Homework",
            "content": "Score 0.9/1.0 . FRQ 2019 #1 . 1. The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . Answer: . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) {} int count = 0; for (int i = year1; i &lt;= year2; i++) { if (isLeapYear(i)) { count++; } return count; } } . In this problem I created a loop so that it would go through all the years that are in between year1 and year2. Then inside of that I put a if statement to decide if there was a leap year. If yes, count would be increased by 1. . (b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar | private static boolean isLeapYear(int year) | public static int numberOfLeapYears(int year1, int year2) | private static int firstDayOfYear(int year) | private static int dayOfYear(int month, int day, int year) | public static int dayOfWeek(int month, int day, int year) | . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . Answer: . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int day = dayOfYear(month, day, year); return (firstDay + day - 1) % 7; } . For this, I created two variables and set them to the firstDayOfYear and dayOfYear. After that, I added the two values together and subtracted 1. The % 7 is what the remainder is. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/30/if-then-hw.html",
            "relUrl": "/jupyter/2022/11/30/if-then-hw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 5 Lesson Homework",
            "content": "Score 0.9/1.0 . FRQ 2019 #2 . public class StepTracker { private int minSteps; private int totalSteps; private int numDays; private int numActivateDays; public StepTracker (int threshold) { minSteps = threshold; totalSteps = 0; numDays = 0; numActiveDays = 0; } public void addDailySteps(int steps) { totalSteps += steps; numDays++; if (steps &gt;= minSteps) { numActiveDays++; } } public int activeDays() { return numActiveDays; } public double averageSteps() { if (numDays == 0) { return 0.0; } else { return (double) totalSteps / numDays; } } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/30/classes-hw.html",
            "relUrl": "/jupyter/2022/11/30/classes-hw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 6 Lesson Homework",
            "content": "Score .9/1.0 . FRQ 3a Arrays . public void addMembers(String[] names, int gradYear) { for (String a: names) { MemberInfo newM = new memberInfo (a, gradYear, true); memberList.add(newM); } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/30/arrays_hw.html",
            "relUrl": "/jupyter/2022/11/30/arrays_hw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Title",
            "content": "import java.util.HashMap; public class APCalendar { /** Returns true if year is a leap year and false otherwise. * isLeapYear(2019) returns False * isLeapYear(2016) returns True */ private static boolean isLeapYear(int year) { // implementation not shown if (year % 4 == 0 &amp;&amp; !(year % 100 == 0)) { return true; } else if (year % 400 == 0) { return true; } return false; } /** Returns the value representing the day of the week * 0 denotes Sunday, * 1 denotes Monday, ..., * 6 denotes Saturday. * firstDayOfYear(2019) returns 2 for Tuesday. */ private static int firstDayOfYear(int year) { // implementation not shown return 0; } /** Returns n, where month, day, and year specify the nth day of the year. * This method accounts for whether year is a leap year. * dayOfYear(1, 1, 2019) return 1 * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. */ private static int dayOfYear(int month, int day, int year) { // implementation not shown HashMap&lt;String, String&gt; capitalCities = new HashMap&lt;String, String&gt;(); return 1; } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { // to be implemented in part (a) return 0; } /** Returns the value representing the day of the week for the given date * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { // to be implemented in part (b) return 0; } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot;isLeapYear: &quot; + APCalendar.isLeapYear(2022)); System.out.println(&quot;firstDayOfYear: &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot;dayOfYear: &quot; + APCalendar.dayOfYear(1, 1, 2022)); // Public access modifiers System.out.println(&quot;numberOfLeapYears: &quot; + APCalendar.numberOfLeapYears(2000, 2022)); System.out.println(&quot;dayOfWeek: &quot; + APCalendar.dayOfWeek(1, 1, 2022)); } } .",
            "url": "https://jz21324.github.io/Vcode/2022/11/15/apCalender_frq1.html",
            "relUrl": "/2022/11/15/apCalender_frq1.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Test Corrections",
            "content": "Question 4 Selection with variables x and y . What is printed as a result of executing the code segment? . I chose answer B which was 2.3333 but the value was an integer so this is not a possible answer. The correct answer was C which was 2 because when 7 is divided by 2, you get 2.3333 however, it has to be an integer so it&#39;s 2. . Question 14 Vehicle interface getMileage . Which of the following can be used to replace / expression / so that getTotalMileage returns the total of the miles traveled for all vehicles in the fleet? . I chose the answer D, however the answer is E which is v.getMileage() because it follows the form of object.method(parameters) where v is the object, getMileage is the method, and the parameters is empty. . Question 16 append method with two 1D int arrays . Which of the following expressions can be used to replace / index / so that append will work as intended? . I chose answer B which was k, but the right answer was answer D, k + a1.length, because it needed to have the a1.length included to have the first index as a1.length. . Question 23 manipulate method and animals List . What will the contents of animals be as a result of calling manipulate? . The code segment is supposed to take the element that starts with &quot;b&quot; and move it to index 1. This means that the correct answer is [&quot;bear&quot;, &quot;zebra&quot;, &quot;bass&quot;, &quot;cat&quot;, &quot;koala&quot;, &quot;baboon&quot;]. . Question 25 RBox interfaces . Which of the interfaces, if correctly implemented by a Box class, would be sufficient functionality for a user of the Box class to determine if one Box can fit inside another? . I and II only is the correct answer because choice I gives access to the height, width, and depth of the box with the get methods. Choice II provides smallerHeight, smallerWidth, and smallerDepth methods that let you know whether the box is smaller. . Question 30 scramble method with String and int parameters . What value is returned as a result of the call scramble(&quot;compiler&quot;, 3)? . The correct answer is &quot;ilercom&quot; because the howFar is 3 so the first letter is actually the fourth because the paramater is howFar + 1. The length of the word is 8 - 7 letters so it only returns &quot;ilercom&quot;. . Question 33 Print sum after while loop . What is printed as a result of executing the code segment? . The correct answer is that nothing is printed because it is an infinite loop. This is due to k not being changed so it will always be less than 4 so the expression is always true. . Question 34 Point and Circle Classes . Which of the following replacements for / missing code / will correctly implement the circle constructor? . Choice II gives a new Point with x as a and y as b which makes an actual point. This makes it the only correct answer. . Question 35 Print result after while loop . What is printed as a result of executing the code segment? . The modulus will take the remainder of the value so when 2574 is taken the modulus of 10, 4 will return. It will then go again and return 2, 5, and 7. . Question 38 Compound Boolean expression with variables x and y . Which of the following is equivalent to the expression given above? . Answer A is the correct answer because it will be true if y is greater than 10000 or x is between 1000 and 1500 and if y is greater than 10000, the value will be true. It will still be true if y is not greater than 1000 and x is still in between 1000 and 1500. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/08/test-corrections.html",
            "relUrl": "/jupyter/2022/11/08/test-corrections.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "let clockElement = document.getElementById(&#39;clock&#39;) // Execute clock function on load clock(); // Clock update executes on each interval set by timer function clock() { let date = new Date(); clockElement.textContent = date.toLocaleString(); } // Clock refresh timer, a reoccurring event setInterval(clock, 1000); . Input In [44] let clockElement = document.getElementById(&#39;clock&#39;) ^ SyntaxError: invalid syntax . import threading # import threading def keepUpdating(): # build a function to run over and over # global variable setup global run try: run except: run = 0 print(&quot;Seconds:&quot;, run) # replace this line with updates to data run += 1 # this is update to global variable threading.Timer(3.0, keepUpdating).start() keepUpdating() . Seconds: 130229 Seconds: 130230 Seconds: 130231 Seconds: 130232 Seconds: 130233 Seconds: 130234 Seconds: 130235 Seconds: 130236 Seconds: 130237 Seconds: 130238 Seconds: 130239 Seconds: 130240 Seconds: 130241 Seconds: 130242 Seconds: 130243 Seconds: 130244 Seconds: 130245 Seconds: 130246 Seconds: 130247 Seconds: 130248 Seconds: 130249 Seconds: 130250 Seconds: 130251 Seconds: 130252 Seconds: 130253 Seconds: 130254 Seconds: 130255 Seconds: 130256 Seconds: 130257 Seconds: 130258 Seconds: 130259 Seconds: 130260 Seconds: 130261 Seconds: 130262 Seconds: 130263 Seconds: 130264 Seconds: 130265 Seconds: 130266 Seconds: 130267 Seconds: 130268 Seconds: 130269 Seconds: 130270 Seconds: 130271 Seconds: 130272 Seconds: 130273 Seconds: 130274 Seconds: 130275 Seconds: 130276 Seconds: 130277 Seconds: 130278 Seconds: 130279 Seconds: 130280 Seconds: 130281 Seconds: 130282 Seconds: 130283 Seconds: 130284 Seconds: 130285 Seconds: 130286 Seconds: 130287 Seconds: 130288 Seconds: 130289 Seconds: 130290 Seconds: 130291 Seconds: 130292 Seconds: 130293 Seconds: 130294 Seconds: 130295 Seconds: 130296 Seconds: 130297 Seconds: 130298 Seconds: 130299 Seconds: 130300 Seconds: 130301 Seconds: 130302 Seconds: 130303 Seconds: 130304 Seconds: 130305 Seconds: 130306 Seconds: 130307 Seconds: 130308 Seconds: 130309 Seconds: 130310 Seconds: 130311 Seconds: 130312 Seconds: 130313 Seconds: 130314 Seconds: 130315 Seconds: 130316 Seconds: 130317 Seconds: 130318 Seconds: 130319 Seconds: 130320 Seconds:Seconds: 130321 130321 Seconds: 130323 Seconds: 130324 Seconds: 130325 Seconds: 130326 Seconds: 130327 Seconds: 130328 Seconds: 130329 Seconds: 130330 Seconds:Seconds: 130331 130331 .",
            "url": "https://jz21324.github.io/Vcode/2022/11/07/incremation.html",
            "relUrl": "/2022/11/07/incremation.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Tri One Blog",
            "content": "Learnings . I was pretty new to code but I learned about connecting GitHub to VSCode. This gave me a solid introduction to Computer Science. I also learned some basic Java code, such as creating a class and some basic commands. . public class Main { public static void main() { int a = 23; String b = &quot;Test&quot;; double c = 34.355; System.out.print(&quot;The &quot; + a + &quot; is an integer of &quot; + b + &quot; and a double of &quot; + c); } } Main.main(); . The 23 is an integer of Test and a double of 34.355 . Primitive Lesson Learnings . Primitives . Booleans . true and false | one bit | . Integers . int values | 2-3 bits | . Double . decimal values | 64 bits | . boolean a = true; int b = 5; double c = 7.5; . Operators . addition: + subtraction: - division: / multiplication: * increase varaible by 1: ++ . int a = 5 + 10; int b = 20 - 5; int c = 45 / 3; int d = 5 * 3; System.out.println(a + b + c + d); . 60 . Video Learning Notes . Primitive Data Types in Java . A byte is just 8 bits. Int is used for integer values. Floats are used for values with few decimal digits, while doubles are used for values with many decimal digits. A boolean is used for false or true values. A char will have a single character. A string will have multiple characters. . byte a = 12; int b = 5; float c = 6.3f; double d = 7.344345542; boolean e = true; char f = &#39;W&#39;; String g = &quot;Hello&quot;; . Objects Learnings . FRQ 2021 . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } } . Boolean If-Then Statement Homework . FRQ 2019 #1 . 1. The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . Answer: . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) {} int count = 0; for (int i = year1; i &lt;= year2; i++) { if (isLeapYear(i)) { count++; } return count; } } . In this problem I created a loop so that it would go through all the years that are in between year1 and year2. Then inside of that I put a if statement to decide if there was a leap year. If yes, count would be increased by 1. . (b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar | private static boolean isLeapYear(int year) | public static int numberOfLeapYears(int year1, int year2) | private static int firstDayOfYear(int year) | private static int dayOfYear(int month, int day, int year) | public static int dayOfWeek(int month, int day, int year) | . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . Answer: . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int day = dayOfYear(month, day, year); return (firstDay + day - 1) % 7; } . For this, I created two variables and set them to the firstDayOfYear and dayOfYear. After that, I added the two values together and subtracted 1. The % 7 is what the remainder is. . Iteration Lesson Homework . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letter = &quot;&quot;; public CaesarCipher(String message) { for (int i = 0; i &lt; message.length(); i++) { letter = message.substring(i, i + 1); if (letter.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letter.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letter.equals(letters[j])) { System.out.print(letters[(j + 3) % 26]); } if (letter.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } /*String oldLetter = message1.substring(i); System.out.println(oldLetter); int oldIndex = Arrays.asList(letters).indexOf(oldLetter); String newLetter = letters[(oldIndex + 3) % 26]; newMessage += newLetter; //System.out.println(message1.indexOf(letters[i+3])); */ } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious . Creating Classes Homework . FRQ 2019 #2 . public class StepTracker { private int minSteps; private int totalSteps; private int numDays; private int numActivateDays; public StepTracker (int threshold) { minSteps = threshold; totalSteps = 0; numDays = 0; numActiveDays = 0; } public void addDailySteps(int steps) { totalSteps += steps; numDays++; if (steps &gt;= minSteps) { numActiveDays++; } } public int activeDays() { return numActiveDays; } public double averageSteps() { if (numDays == 0) { return 0.0; } else { return (double) totalSteps / numDays; } } } . Array Homework . FRQ 3a Arrays . public void addMembers(String[] names, int gradYear) { for (String a: names) { MemberInfo newM = new memberInfo (a, gradYear, true); memberList.add(newM); } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/11/04/blog-learnings-for-tri.html",
            "relUrl": "/jupyter/2022/11/04/blog-learnings-for-tri.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Recursion Lesson",
            "content": "public class RecursionExample1 { static void recursion() { System.out.println(&quot;hello&quot;); recursion(); } public static void main(String[] args) { recursion(); } } .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/13/recursion-lesson.html",
            "relUrl": "/jupyter/2022/10/13/recursion-lesson.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Array List",
            "content": "Arrays can be configured through .add, .get, .set, .sort, .clear, and more methods. The .add method adds an index to the array list and the .get calls the specific index number. The .set method sets the index to a new index. The .sort method sorts the indexes in a certain order and .clear will clear all the indexes in the array. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main() { ArrayList&lt;String&gt; sports = new ArrayList&lt;String&gt;(); //Creates a new array sports.add(&quot;Football&quot;); sports.add(&quot;Basketball&quot;); //adds different sports to the array sports.add(&quot;Soccer&quot;); sports.add(&quot;Baseball&quot;); sports.add(&quot;Tennis&quot;); System.out.println(sports); // prints the array System.out.println(&quot; &quot;); for (int i = 0; i &lt; 5; i++) { System.out.println(sports.get(i)); // prints each array separately } System.out.println(&quot; &quot;); System.out.println(&quot;The size of the array is &quot; + sports.size()); //prints the size of the array sports.set(3, &quot;Golf&quot;); // changes the 3 array to &quot;Golf&quot; System.out.println(&quot;The 3 array has been changed to &quot; + sports.get(3)); System.out.println(&quot; &quot;); Collections.sort(sports); //sorts the array in alphabetical order System.out.println(&quot;The array list is in alphabetical order:&quot;); for (String i : sports) { System.out.println(i); } System.out.println(&quot; &quot;); sports.clear(); //clears the array System.out.println(&quot;The array list is now empty and says:&quot; + sports); } } Main.main(); . [Football, Basketball, Soccer, Baseball, Tennis] Football Basketball Soccer Baseball Tennis The size of the array is 5 The 3 array has been changed to Golf The array list is in alphabetical order: Basketball Football Golf Soccer Tennis The array list is now empty and says:[] .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/07/array_list.html",
            "relUrl": "/jupyter/2022/10/07/array_list.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "POJO and API",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/10/06/pojo.html",
            "relUrl": "/jupyter/2022/10/06/pojo.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Arrays and Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class imageDemo { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { String name = &quot;pepsi-logo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } imageDemo.main(null); . javax.imageio.IIOException: Can&#39;t read input file! at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1308) at REPL.$JShell$16$imageDemo.main($JShell$16.java:30) at REPL.$JShell$17.do_it$($JShell$17.java:19) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics Pepsi = new Pics(&quot;Pepsi&quot;, &quot;png&quot;); Pepsi.printStats(&quot;Original&quot;); Pepsi.resize(25); Pepsi.printStats(&quot;Scaled&quot;); Pepsi.convertToAscii(); } } Pics.main(null); . Original: 21235 300x300 images/Pepsi.png Scaled: 3281 75x75 images/tmp/Pepsi.png .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/28/arrays_images.html",
            "relUrl": "/jupyter/2022/09/28/arrays_images.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "JavaScript",
            "content": "console.log(&quot;Hello World!&quot;); . Hello World! . var speak = &quot;Hello World&quot;; console.log(speak); . Hello World . function logIt(output) { console.log(output); } logIt(speak); . Hello World . console.log(&quot;Welcome!&quot;) logIt(&quot;Hello Students!&quot;); logIt(2022) . Welcome! Hello Students! 2022 . Team Roles . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;Scrum Master&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var scrummaster = new Person(&quot;Jazair Tallman&quot;, &quot;@jz21324&quot;, 2024); // object type is easy to work with in JavaScript logIt(scrummaster); // before role logIt(scrummaster.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher scrummaster.setRole(&quot;Scrum Master&quot;); // set the role logIt(scrummaster); logIt(scrummaster.toJSON()); . Person { name: &#39;Jazair Tallman&#39;, ghID: &#39;@jz21324&#39;, classOf: 2024, role: &#39;Scrum Master&#39; } {&#34;name&#34;:&#34;Jazair Tallman&#34;,&#34;ghID&#34;:&#34;@jz21324&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Scrum Master&#34;} Person { name: &#39;Jazair Tallman&#39;, ghID: &#39;@jz21324&#39;, classOf: 2024, role: &#39;Scrum Master&#39; } {&#34;name&#34;:&#34;Jazair Tallman&#34;,&#34;ghID&#34;:&#34;@jz21324&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Scrum Master&#34;} .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/26/java_script.html",
            "relUrl": "/jupyter/2022/09/26/java_script.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Fibonacci Sequence",
            "content": "Fibo With For Loop . First I made an abstract class because I can&#39;t make an instance and only extend with a subclass. . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* * Zero parameter constructor uses Telescoping technique to allow setting of the * required value nth * * @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* * Construct the nth fibonacci number * * @param: nth number, the value is constrained to 92 because of overflow in a * long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); // initialize fibonacci and time mvc this.init(); } /* * This Method should be &quot;abstract&quot; * Leave method as protected, as it is only authorized to extender of the class * Make new class that extends and defines init() * Inside references within this class would change from this to super * Repeat process using for, while, recursion */ protected abstract void init(); /* * Number is added to fibonacci sequence, current state of &quot;list&quot; is added to * hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* * Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* * Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* * Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i = 0; i &lt; this.size; i++) { System.out.println(&quot;fibonacci Sequence &quot; + (i + 1) + &quot; = &quot; + this.getNthSeq(i)); } } } . For Loop . public class FiboFor extends Fibo { public FiboFor() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboFor(int nth) { super(nth); } @Override protected void init() { this.name = &quot;For&quot;; long f[] = new long[] { 0, 1 }; for (int i = 0; i &lt; size; i++) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; } } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . While Loop . import java.util.ArrayList; import java.util.HashMap; public class FiboWhile extends Fibo { public FiboWhile() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboWhile(int nth) { super(nth); } @Override protected void init() { this.name = &quot;While&quot;; long f[] = new long[] { 0, 1 }; int i = 0; while (i &lt; size) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; i++; } } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Recursion . import java.util.ArrayList; import java.util.HashMap; public class FiboRecursion extends Fibo { public FiboRecursion() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboRecursion(int nth) { super(nth); } @Override protected void init() { this.name = &quot;Recursion&quot;; for (int i = 0; i &lt; size; i++) { setData(fiboRecursion(i)); } } private long fiboRecursion(long n) { if (n &lt;= 1) { return n; } return (fiboRecursion(n - 1) + fiboRecursion(n - 2)); } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRecursion fib = new FiboRecursion(); fib.print(); } } FiboRecursion.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/26/fibonacci.html",
            "relUrl": "/jupyter/2022/09/26/fibonacci.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Iteration with 2D Array",
            "content": "class CarLoop { String [][] car; public CarLoop() { car = new String[][]{ { &quot; &quot;, &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot;( _ _ _ &quot;, &quot;=`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; _/ ______ __ &quot;, &quot; / -. -|- ,-.`-. &quot;, &quot; `( o )-( o )-&#39; &quot;, &quot; `-&#39; `-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; _________________________ &quot;, &quot; | | | | | | &quot;, &quot; |___|_____|_____|____|_|___ &quot;, &quot; | | | &quot;, &quot; `--(o)(o)--(o)--&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; _____________ &quot;, &quot; ||______][__ ____ &quot;, &quot; |o _ |- | _ o)&quot;, &quot; &#39;(_)-(_) &#39;&quot;, &quot;===============================================================&quot; }, }; } public void printRace() { System.out.println(); System.out.println(&quot;Car drivng down in Java Loop&quot;); int carPlace = 4; for (int i = carPlace; i &gt;= 1; i--) { System.out.println(i + &quot; cars left in the race&quot;); for (int row = 0; row &lt; carPlace; row++) { for (int col = 0; col &lt; car[row].length; col++) { System.out.println(car[row][col] + &quot; &quot;); } } carPlace -= 1; } } public static void main(String[] args) { new CarLoop().printRace(); } } CarLoop.main(null); . Car drivng down in Java Loop 4 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== _/ ______ __ / -. -|- ,-.`-. `( o )-( o )-&#39; `-&#39; `-&#39; =============================================================== _________________________ | | | | | | |___|_____|_____|____|_|___ | | | `--(o)(o)--(o)--&#39; =============================================================== _____________ ||______][__ ____ |o _ |- | _ o) &#39;(_)-(_) &#39; =============================================================== 3 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== _/ ______ __ / -. -|- ,-.`-. `( o )-( o )-&#39; `-&#39; `-&#39; =============================================================== _________________________ | | | | | | |___|_____|_____|____|_|___ | | | `--(o)(o)--(o)--&#39; =============================================================== 2 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== _/ ______ __ / -. -|- ,-.`-. `( o )-( o )-&#39; `-&#39; `-&#39; =============================================================== 1 cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== . Hacks . Build you own Jupyter Notebook. Feel free to use any ASCII art of your choice, there are some much better ones here. My little guys were made up out of my head while looking at unicode characters. . Print monkeys horizontally versus vertically. | Build more or entire rhyme for the &quot;Monkey Jumpers&quot; countdown poem | Add names or other properties to the monkeys | . In you notebook, illustrate or answer some of these questions. . Is this program in more of an Imperative Programming Style or OOP style? Explain. Observe variable assignments. . Is each Monkey an object? Build an where the monkey is an object versus two-dimensional array. This would be leading into Unit 5 requirements. . | Study loops and zero based counting Study two-dimensional (2D) array references Explain different way you can access a 2D array . | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/12/iteration_2Darray.html",
            "relUrl": "/jupyter/2022/09/12/iteration_2Darray.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Focuses and Habits",
            "content": "Focuses and Habits . Focuses . School . Grades | SAT Prep | AP Exams | . Extracurriculars . School clubs: Robotics, NHS, SACS | Soccer | . Habits . Work harder and more efficiently | Plan better | Volunteer more often | Apply for more leadership roles | . Harvard Video . Notes: It is highly important to maintain a low stress level. To do this I need to take breaks from class work and spend time to do a hobby or something that I like and that can relieve stress. Most colleges cause a lot of stress to their students. . Note of gratitude: Dear Mr. Krenz, I am eternally grateful for your math teachings. You have helped me be the great mathmatician I am today. You are and will always be the best teacher there is. Thank you! . Goals: . Get straight A’s | Participate in multiple clubs | Connect with more people | .",
            "url": "https://jz21324.github.io/Vcode/markdown/2022/09/11/focus-habits.html",
            "relUrl": "/markdown/2022/09/11/focus-habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Code.org OOP",
            "content": "Code.org OOP . Proof of completion . ![]code.org2_pic.png) . Classes and Objects . Classes are a way to create and store objects and their data types and methods. They contain data, such as variables and actions, such as methods. . Instances . Instances are variables that are non-static and belong to a certain class. To create the, an object has to be instantiated to all methods in that class. . Loop Statements . Java has if and while statements that allow for code to be executed with a specific condition. . For a while loop, if the condition is true, the code will continue to run until that same condition is false. . For an if statement, the code will only run once if the condition is true. If statements can and are sometimes followed with an else statement that provides a code to run if the latter condition is false. . Extends . Extends, as in the name, extend a java class. It inherits another class, which takes in the methods and attributes from another class and brings it elsewhere. After this, more methods and attributes are able to be added to this class. . A subclass is the class that inherits it. . A superclass is the class being inherited from. .",
            "url": "https://jz21324.github.io/Vcode/markdown/2022/09/06/code-org.html",
            "relUrl": "/markdown/2022/09/06/code-org.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Java Primitives Demonstration",
            "content": "int b = 10; boolean c = false; System.out.println(&quot;The integer is &quot; + b + &quot; and the boolean is &quot; + c) . The integer is 10 and the boolean is false .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/05/java_primitives.html",
            "relUrl": "/jupyter/2022/09/05/java_primitives.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "If Else Statement Lesson",
            "content": "If Statement . The if statement is used to test whether a condition is met or not. If the condition is true, the following command will be run. . boolean a = true; // Set the boolean to &quot;true&quot; if (a = false) { System.out.println(&quot;This is false&quot;); // Will run if a is false } if (a = true) { System.out.println(&quot;This is true&quot;); // Will run if a is true } . This is true . If-else Statement . The if-else statement will run a piece of code if a certain condition is met. If this condition is not met then another command will be run. . boolean b = false; // Set the boolean to &quot;false&quot; if (b = true) { System.out.println(&quot;b is true&quot;); } else { System.out.println(&quot;b is not true&quot;); } // The if condition is not met so the else statement is ran . b is true . If-elseif-else Statement . An if-elseif-else statement will determine whether a certain condition is true. If it isn&#39;t it will go to the next elseif statement and do the same thing. If this condition is also false then it will go down and continue to go through conditions until one is true. . boolean c = true; // Sets the boolean to &quot;true&quot; if (c = false) { System.out.println(&quot;The first if statement is true&quot;); // If the if condition is not true then it will not run } else if (c = !true) { System.out.println(&quot;This else if statement is true&quot;); } else if (c = false &amp;&amp; true) { System.out.println(&quot;This else if statement is true&quot;); } else if (c = !(!false || !true)) { System.out.println(&quot;This else if statement is true&quot;); // If the else if condition is not true then then it will not run } else { System.out.println(&quot;None of the other conditions were true&quot;); // None of the if statements or else if statements are true so the else statement will run } . None of the other conditions were true . If-elseif-else statement (5 or more conditions) . int stars = 3; // The integer &quot;stars&quot; is determined to be 3 if (stars &lt;= 0) { System.out.println(&quot;You got ☆☆☆☆☆&quot;); } else if (stars &lt;= 1) { System.out.println(&quot;You got ★☆☆☆☆&quot;); } else if (stars &lt;= 2) { System.out.println(&quot;You got ★★☆☆☆&quot;); } else if (stars &lt;= 3) { System.out.println(&quot;You got ★★★☆☆&quot;); } else if (stars &lt;= 4) { System.out.println(&quot;You got ★★★★☆&quot;); } else { System.out.println(&quot;You got ★★★★★&quot;); } // The code goes through the if and else if conditions to figure out how many stars to show. . You got ★★★☆☆ . Switch Case . A switch case is able to run one statement after choosing one from multiple statements. This makes it similar to an else-if ladder where it will go through mulitple conditions to see which is true. . When making a switch case code, it is important that you make sure no two cases have the same value and that the same variable is used for all the cases. . int stars = 4; // The integer &quot;stars&quot; is determined to be 3 switch (stars) { // A switch statement that takes in the &quot;stars&quot; integer case 1: // When there are 0 stars System.out.println(&quot;You got ☆☆☆☆☆&quot;); break; case 2: // When there is 1 star System.out.println(&quot;You got ★☆☆☆☆&quot;); break; case 3: // When there are 2 stars System.out.println(&quot;You got ★★☆☆☆&quot;); break; case 4: // When there are 3 stars System.out.println(&quot;You got ★★★☆☆&quot;); break; case 5: // When there are 4 stars System.out.println(&quot;You got ★★★★☆&quot;); break; default: //When none of the other cases are met so there are 5 stars System.out.println(&quot;You got ★★★★★&quot;); } . You got ★★★☆☆ . De Morgan&#39;s Law . De Morgan&#39;s Law states that the &quot;!&quot; symbol will negate an And statement and an Or statement. This means that if a condition is written as a || b, !(a || b) would really be a &amp;&amp; b. This goes for the other way around where !(a &amp;&amp; b) is a || b. It will also cause a true statement to be false with !(true) and vice versa. . boolean child = true; boolean hungry = false; if (!(child &amp;&amp; hungry)) { System.out.println(&quot;You have a hungry child&quot;); } else { System.out.println(&quot;Who knows what&#39;s going on?&quot;); } . You have a hungry child . boolean fruit = true; boolean red = true; if (!(!(fruit) || !(red))) { System.out.println(&quot;It&#39;s probably a red apple&quot;); } else { System.out.println(&quot;You have an unknown food&quot;); } . It&#39;s probably a red apple . Resources used . CodeHS | simplilearn | w3schools |",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/09/05/if_else_lesson.html",
            "relUrl": "/jupyter/2022/09/05/if_else_lesson.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Java Objects Demonstration",
            "content": "Objects . The code creates a public class called &quot;Student&quot;, which takes in three different instance variables: class, teacher, and period. With these a string of &quot;AP Computer Science A&quot;, another string of &quot;Mr. Mortensen&quot;, and an integer of 2 are put together to print out the statement, &quot;I have AP Computer Science A for Mr. Mortensen in period 2&quot; . public class Student { // instance variables public String class; public String teacher; public int period; public Student (String class, String teacher, int period) { this.class = class; this.teacher = teacher; this.period = period; } public static void main(String[] args) { Student s = new Student(&quot;AP Computer Science A&quot;, &quot;Mr. Mortensen&quot;, 2); system.out.println(&quot;I have &quot; + s.teacher &quot; for &quot; + s.class + &quot; in period &quot; + s.period); } } . | public String class; &lt;identifier&gt; expected | public String class; &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { invalid method declaration; return type required | public Student (String class, String teacher, int period) { &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { &lt;identifier&gt; expected | public Student (String class, String teacher, int period) { &#39;;&#39; expected | this.class = class; &lt;identifier&gt; expected | this.class = class; illegal start of expression | this.class = class; &lt;identifier&gt; expected | this.teacher = teacher; illegal start of type | this.teacher = teacher; &#39;;&#39; expected | this.teacher = teacher; &lt;identifier&gt; expected | this.period = period; illegal start of type | this.period = period; &#39;;&#39; expected | this.period = period; &lt;identifier&gt; expected | public static void main(String[] args) { illegal start of expression | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); &#39;)&#39; expected | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); not a statement | system.out.println(&#34;I have &#34; + s.teacher &#34; for &#34; + s.class + &#34; in period &#34; + s.period); &#39;;&#39; expected | } reached end of file while parsing . Hacks . Explain where a Class is defined . A class is defined where you need variables, objects, or methods to be added to your code | . Explain where an instances of a Class is defined . An instance is defined in a Class as an object. | . Explain where an object is Calling a Method . An object can call a method when the action is needed to be used for the code to go through. | . Explain where an object is Mutating data . An object is mutation data when there is a change in the original data. | . Describe Console, GUI differences, or Code.org differences. . A console is where the user input and gets outputs. | Ex: Bash shell . | A GUI is more clickable and user-friendly. There is also visual feedback and display. . | Code.org used a painter as the visual object which shows the user what the code is doing. It has a public class as &quot;MyNeighborhood&quot;. To call a method, you put &quot;variableName.methodName();&quot;. . | .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/29/java_objects.html",
            "relUrl": "/jupyter/2022/08/29/java_objects.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Python Notebook",
            "content": "message = &quot;Hello World&quot; print(message) . Hello World .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/python_nb.html",
            "relUrl": "/jupyter/2022/08/22/python_nb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Notes",
            "content": "Unit 1: Primitives . Primitives are datatypes that are built into java. The different datatypes are int, float, long, double, boolean, char, byte, and short. When it is lower case, it is primitive and when it is uppercase, it is part of a wrapper class. .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/notes.html",
            "relUrl": "/jupyter/2022/08/22/notes.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello Java world!&quot;) . Hello Java world! .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/java_nb.html",
            "relUrl": "/jupyter/2022/08/22/java_nb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Bash Check",
            "content": "python --version; . Python 3.9.12 .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2022/08/22/bash_checks.html",
            "relUrl": "/jupyter/2022/08/22/bash_checks.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "My First Post",
            "content": "My First Post . Welcome! . This is a website that will include different resources and posts of different coding languages, such as python and java. Along with this, there will be multiple blogs like this one that will comment on the progress of this website. .",
            "url": "https://jz21324.github.io/Vcode/markdown/2020/08/20/first_post.html",
            "relUrl": "/markdown/2020/08/20/first_post.html",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post50": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . Running cells with &#39;Python 3.8.10 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/bin/python3 -m pip install ipykernel -U --user --force-reinstall&#39; . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jz21324.github.io/Vcode/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post51": {
            "title": "An Example Markdown Post",
            "content": "An Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jz21324.github.io/Vcode/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jz21324.github.io/Vcode/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jz21324.github.io/Vcode/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}